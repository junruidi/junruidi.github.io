install.packages("Rcpp")
x = c(12,1,3,"a")
x
library(reticulate)
py_available()
install.packages("DT")
install.packages(c("callr", "fs", "gamm4", "glue", "reticulate", "RLRsim", "survey", "tibble", "xml2"))
install.packages("backports")
install.packages("purrr")
install.packages(c("qdap", "xlsx"))
install.packages("rcade")
devtools::install_github('RLesur/Rcade')
Rcade::games$Mariohtml5
Rcade::games$`2048`
Rcade::games$Pond
Rcade::games$CathTheEgg
install.packages(c("fda", "rex", "tibble", "withr"))
install.packages("xml2")
sessionInfo()
library(refund)
sessionInfo()
install.packages(c("labelled", "pkgbuild"))
install.packages(c("git2r", "labelled", "rematch2", "rlang", "usethis", "zoo"))
install.packages(c("ellipsis", "gender", "maptools", "vctrs"))
Rcade::games
Rcade::games$BoulderDash
Rcade::games$SURVIVOR
Rcade::games$Pacman
32+11+8+8+5+4+3+2+2+3
install.packages(c("car", "carData", "sp", "tidyr", "tinytex", "xfun"))
library(refund)
?gls_cs
gls_cs()
gls_cs
install.packages(c("dplyr", "ggplot2", "haven", "later", "pkgload", "rmarkdown", "vctrs"))
library(lubridate)
ymd("2012/1/31")
ymd("2012\1\31")
ymd("2012-1-31")
ymd("2012 1 31")
library(ActFrag)
?fragmentation_long
View(example_activity_data$count)
library(rnhanesdata)
install.packages(c("backports", "tibble"))
?lm
install.packages("backports")
install.packages(c("chron", "cpp11", "dplyr", "Hmisc", "ps", "zip"))
library(rnhanesdata)
devtools::install_github("andrew-leroux/rnhanesdata")
library(rnhanesdata)
library(dplyr)
library(accelerometry)
library(ActFrag)
rm(list = ls())
data("PAXINTEN_C")
data("PAXINTEN_D")
data("Flags_C")
data("Flags_D")
## re-code activity counts which are considered "non-wear" to be 0
## this doesn't impact much data, most estimated non-wear times correspond to 0 counts anyway
PAXINTEN_C[,paste0("MIN",1:1440)] <- PAXINTEN_C[,paste0("MIN",1:1440)]*Flags_C[,paste0("MIN",1:1440)]
PAXINTEN_D[,paste0("MIN",1:1440)] <- PAXINTEN_D[,paste0("MIN",1:1440)]*Flags_D[,paste0("MIN",1:1440)]
act = rbind(PAXINTEN_C,PAXINTEN_D)
flag = rbind(Flags_C, Flags_D)
num_to_week = function(x){
factor(ifelse(x == 1, "Sun", ifelse(x == 2, "Mon", ifelse(x == 3, "Tue",
ifelse(x == 4, "Wed", ifelse(x == 5, "Thu",
ifelse(x == 6, "Fri", ifelse(x == 7, "Sat",NA))))))),
levels = c("Sun","Mon","Tue","Wed","Thu","Fri","Sat"))
}
act$WEEKDAY = num_to_week(act$WEEKDAY)
flag$WEEKDAY = num_to_week(flag$WEEKDAY)
act$Seq = rep(x = c(1:7),length(unique(act$SEQN)))
flag$Seq = rep(x = c(1:7),length(unique(flag$SEQN)))
act$SDDSRVYR = NULL
flag$SDDSRVYR = NULL
act = act[,c(1,2,3,4,1445,5:1444)]
flag = flag[,c(1,2,3,4,1445,5:1444)]
# subject days with more than 10 hours of wearing
nonwear_flag10 = rowSums(flag[, paste('MIN', 1:1440, sep='')], na.rm = TRUE) <600
act10 = act[!(nonwear_flag10 | act$PAXCAL==2 | act$PAXCAL==9 | act$PAXSTAT==2),]
wear10 = flag[!(nonwear_flag10 | flag$PAXCAL==2 | flag$PAXCAL==9 | flag$PAXSTAT==2),]
act10$PAXCAL = act10$PAXSTAT = wear10$PAXCAL = wear10$PAXSTAT = NULL
########################################################################
## This is to correct the period where there is count to nonwear NA/0 ##
########################################################################
act10 = na.omit(act10)
wear10 = na.omit(wear10)
rm(list = setdiff(ls(),c("act10","wear10")))
## Fragmentation
act10$wave = wear10$wave = act10$WEEKDAY = wear10$WEEKDAY =  NULL
names(act10)[c(1:2)] = names(wear10)[c(1:2)] = c("ID","Day")
View(act10)
tail(names(act10))
act_mat = as.matrix(act10[,-c(1:2)])
flag_mat = as.matrix(wear10[,-c(1:2)])
flag_matw = flag_mat
flag_matw[flag_matw == 0] = NA
act_matw = act_mat * flag_matw
metrics = tibble(ID = act10$ID,Day = act10$Day,
LiPA = rowSums(act_mat < 2020 & act_mat >= 100),
MVPA = rowSums(act_mat >= 2020),
WT = rowSums(flag_mat),
LTAC = log(rowSums(act_mat) + 1),
TAC = rowSums(act_mat),
TLAC = rowSums(log(1+act_mat)),
ST = rowSums(act_matw < 100,na.rm = T))
metrics_ave = metrics %>% select(-Day) %>% group_by(ID) %>%
summarise(LiPA = mean(LiPA),
MVPA = mean(MVPA),
WT = mean(WT),
LTAC = mean(LTAC),
TAC = mean(TAC),
TLAC = mean(TLAC),
ST = mean(ST))
frag_10 = fragmentation_long(count.data = act10, weartime = wear10, thresh = 100, bout.length = 1, metrics = "TP", by = "subject")
save(metrics, metrics_ave, file = "C:/Users/STEP/Desktop/PAmetrics.rda")
install.packages(c("backports", "callr", "glue", "jsonlite", "labelled", "maptools", "processx", "refund", "tidyr", "vctrs", "zip"))
install.packages(c("cowplot", "lmtest", "stringi", "xfun", "xlsx"))
install.packages("xlsx")
sessionInfo()
install.packages(c("backports", "covr", "htmlTable", "xlsx"))
install.packages(c("devtools", "knitr", "labelled", "matrixStats", "openssl", "openxlsx", "tinytex", "usethis", "vcd", "withr"))
install.packages("qdap")
install.packages(c("coda", "cpp11", "qdap", "rmarkdown", "xfun"))
install.packages(c("callr", "cli", "clipr", "cpp11", "data.table", "digest", "DT", "e1071", "Formula", "htmlwidgets", "igraph", "labeling", "lme4", "lmerTest", "NLP", "ps", "qdap", "readr", "rlang", "rmarkdown", "sp", "statmod", "stringdist", "tibble"))
setwd("C:/Users/STEP/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
