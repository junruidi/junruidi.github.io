log_act_mat <- matrix(unlist(log_act), nrow = nrow(log_act))
temp <- prcomp(var(t(log_act_mat)))
pc <- (t(log_act_mat) %*% temp$rotation)[, 1:10]
log_act_mat <- matrix(unlist(log_act), nrow = nrow(log_act))
View(log_act_mat)
var(t(log_act_mat))
temp <- prcomp(var(t(log_act_mat)))
pca.fit = prcomp(log_act_mat,center = F,scale. = F)
View(log_act_mat)
x = var(t(log_act_mat))
View(x)
prcomp(x)
sum(is.na(list(log_act_mat)))
Sample <- matrix(rnorm(30 * 5000), 30)
Sample[, c(128, 256, 512)] <- 1
Sample <- data.frame(Sample)
Sample.scaled <- data.frame(apply(Sample, 2, scale))
View(Sample)
View(Sample.scaled)
act_ave = as.data.frame(act %>% group_by(IDvisit) %>% summarise_each(funs = funs(Mean = mean(.,na.rm = T))))
View(act_ave)
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
View(nhanes2003_2004)
View(nhanes2003_2004)
View(nhanes2003_2004)
x = subset(nhanes2003_2004, select = c(mortstat))
View(x)
sum(is.na(x$mortstat))
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont.var = c(SEQN,RIDAGEEX,DR1_020,DR1IKCAL,DR1IPROT,DR1ICARB,DR1ISUGR
DR1ITFAT,DR1IALCO,DR1IVC,DR1IIRON,DR1ICAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC)
cont = subset(nhanes2003_2004, select = cont.var)
cat.var = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
DR1CCMTX,DR1FS, BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220)
cat = subset(nhanes2003_2004, select = cat.var)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont.var = c(SEQN,RIDAGEEX,DR1_020,DR1IKCAL,DR1IPROT,DR1ICARB,DR1ISUGR,
DR1ITFAT,DR1IALCO,DR1IVC,DR1IIRON,DR1ICAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC)
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1_020,DR1IKCAL,DR1IPROT,DR1ICARB,DR1ISUGR,
DR1ITFAT,DR1IALCO,DR1IVC,DR1IIRON,DR1ICAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1IKCAL,DR1IPROT,DR1ICARB,DR1ISUGR,
DR1ITFAT,DR1IALCO,DR1IVC,DR1IIRON,DR1ICAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
names(nhanes2003_2004)
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
View(cont)
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
DR1CCMTX,DR1FS, BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
names(nhanes2003_2004)
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
DR1FS, BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
str(cont)
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
View(cont.dat)
View(cont)
str(cat)
age.dat = merge(x = cont, y = cat, all.x = T)
View(age.dat)
age.dat = age.dat[-which(is.na(age.dat)),]
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
View(age.dat)
age.dat = na.omit(age.dat)
View(cont.dat)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
age.dat.nona = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
trains = sample(nrow(age.dat),nrow(age.dat)*0.8,replace = F)
trainbs
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat),nrow(age.dat)*0.8,replace = F)
train = age.dat[trains,]
valid = age.dat[-trains,]
str(train)
str(cont.dat)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
str(age.dat)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat),nrow(age.dat)*0.8,replace = F)
train = age.dat[trains,]
valid = age.dat[-trains,]
str(train)
View(age.dat)
lm1 = lm(RIDAGEEX~., data = age.dat)
summary(lm1)
fwd = regsubsets( RIDAGEEX ~ ., data = train, nvmax = 10, method = "forward")
library(leaps)
fwd = regsubsets( RIDAGEEX ~ ., data = train, nvmax = 10, method = "forward")
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat.nona),nrow(age.dat.nona)*0.8,replace = F)
train = age.dat[trains,]
valid = age.dat[-trains,]
lm1 = lm(RIDAGEEX ~ ., data= train)
View(train)
View(cont)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat.nona),nrow(age.dat.nona)*0.8,replace = F)
train = age.dat[trains,-1]
valid = age.dat[-trains,-1]
View(train)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat.nona),nrow(age.dat.nona)*0.8,replace = F)
train = age.dat.nona[trains,-1]
valid = age.dat.nona[-trains,-1]
View(train)
lm1 = lm(RIDAGEEX ~ ., data= train)
summary(lm1``)
summary(lm1)
pred = predict(lm1, valid)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat.nona),nrow(age.dat.nona)*0.8,replace = F)
train = age.dat.nona[trains,-1]
valid = age.dat.nona[-trains,-1]
lm1 = lm(RIDAGEEX ~ ., data= train)
pred = predict(lm1, valid)
View(valid)
table(train$MCQ160L)
table(age.dat.nona$MCQ160L)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat.nona),nrow(age.dat.nona)*0.8,replace = F)
train = age.dat.nona[trains,-1]
valid = age.dat.nona[-trains,-1]
#3. modeling
#1. lm with everything
lm1 = lm(RIDAGEEX ~ ., data= train)
pred = predict(lm1, valid)
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
#2. select a validation set
trains = sample(nrow(age.dat.nona),nrow(age.dat.nona)*0.8,replace = F)
train = age.dat.nona[trains,-1]
valid = age.dat.nona[-trains,-1]
View(train)
View(valid)
lm1 = lm(RIDAGEEX ~ ., data= train)
pred = predict(lm1, valid)
View(valid)
for( i in 6:20){table(cat[,i])}
for( i in 6:20){print(table(cat[,i]))}
names(age.dat.nona)
for( i in 37:51){print(table(age.dat.nona[,i]))}
i=1
which(cat[,i] == "9")
as.numeric(cat[,i])
i=6
cat[,i]
which(cat[,i] == "9")
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
for ( i in 6:20){
cat[which(cat[,i] == "9"),i] = NA
}
for ( i in 6:20){print(table(cat[,i]))}
#1. to predict age
setwd("~/Dropbox/Coursework/machine learning/project/")
load("nhanes2003-2004.Rda")
cont = subset(nhanes2003_2004, select = c(SEQN,RIDAGEEX,DR1TKCAL,DR1TPROT,DR1TCARB,DR1TSUGR,
DR1TTFAT,DR1TALCO,DR1TVC,DR1TIRON,DR1TCAFF,LBXTR,LBDLDL,LBXTC,LBXHDD,LBXWBCSI,LBXLYPCT,
LBXMOPCT,LBXNEPCT,LBXEOPCT,LBXBAPCT,LBDLYMNO,
LBDMONO,LBDNENO,LBDEONO,LBDBANO,LBXRBCSI,
LBXHGB,LBXHCT,LBXMCVSI,LBXMCHSI,LBXMC))
cat = subset(nhanes2003_2004, select = c(SEQN,RIAGENDR,RIDRETH1,DMDEDUC,mortstat,
BPQ040A,BPQ040B,BPQ040C,BPQ040E,DIQ010,DIQ050,
HSD010,HSQ590,MCQ010,MCQ092,MCQ160B,MCQ160E,
MCQ160J,MCQ160L,MCQ220))
for ( i in 6:20){
cat[which(cat[,i] == "9"),i] = NA
}
cont.dat = cont
for(i in 2:ncol(cont.dat)){
cont.dat[,i] = as.numeric(as.character(cont.dat[,i]))
}
age.dat = merge(x = cont, y = cat, all.x = T)
for( i in 2:32){
age.dat[,i] = as.numeric(as.character(age.dat[,i]))
}
age.dat = age.dat[-which(is.na(age.dat$RIDAGEEX)),]
age.dat.nona = na.omit(age.dat)
trains = sample(nrow(age.dat.nona),nrow(age.dat.nona)*0.8,replace = F)
train = age.dat.nona[trains,-1]
valid = age.dat.nona[-trains,-1]
lm1 = lm(RIDAGEEX ~ ., data= train)
pred = predict(lm1, valid)
lm1.error = mean((valid$RIDAGEEX - pred)^2)
train.mat = model.matrix(RIDAGEEX~., data=train)
test.mat = model.matrix(RIDAGEEX~., data=valid)
ridge = cv.glmnet(train.mat, train[, "RIDAGEEX"], alpha=0)
library(glmnet)
ridge = cv.glmnet(train.mat, train[, "RIDAGEEX"], alpha=0)
minlambda = ridge$lambda.min
ridge.pred = predict(ridge, newx=test.mat, s=minlambda)
ridge.error = mean((valid$RIDAGEEX - ridge.pred)^2)
lasso = cv.glmnet(train.mat, train[, "RIDAGEEX"], alpha=1)
lambda.best = lasso$lambda.min
lasso.pred = predict(lasso, newx=test.mat, s=lambda.best)
lasso.error = mean((valid$RIDAGEEX - lasso.pred)^2)
library(pls)
pcr = pcr(RIDAGEEX~., data=train, scale=T, validation="CV")
pcr.pred = predict(pcr, valid, ncomp=10)
pcr.error = mean((valid$RIDAGEEX - data.frame(pcr.pred))^2)
names(train)
train.cont = train[,c(1:31)]
valid.cont = valid[,c(1:31)]
pcr = pcr(RIDAGEEX~., data=train.cont, scale=T, validation="CV")
pcr.pred = predict(pcr, valid.cont, ncomp=10)
pcr.error = mean((valid,cont$RIDAGEEX - data.frame(pcr.pred))^2)
pcr.error = mean((valid.cont$RIDAGEEX - data.frame(pcr.pred))^2)
rm(list = ls())
load("~/Dropbox/Junrui Di/brain volume/data/bv.rda")
load("~/Dropbox/Junrui Di/brain volume/data/round4/sleep2exlcudenumber.rda")
analysis_sleep = merge(x = sleep, y = bv, all.x = T)
summary(lm(log(gm) ~ log(icv) + age + sex + educ_years + black + other + CESD +
sleep_PC1 + sleep_PC2 + sleep_PC3 + sleep_PC4 + sleep_PC5 + sleep_PC6,data = analysis_sleep))
summary(lm(log(wm) ~ log(icv) + age + sex + educ_years + black + other + CESD +
sleep_PC1 + sleep_PC2 + sleep_PC3 + sleep_PC4 + sleep_PC5 + sleep_PC6,data = analysis_sleep))
summary(lm(log(ventricle) ~ log(icv) + age + sex + educ_years + black + other + CESD +
sleep_PC1 + sleep_PC2 + sleep_PC3 + sleep_PC4 + sleep_PC5 + sleep_PC6,data = analysis_sleep))
rm(list = ls())
load("~/Dropbox/Junrui Di/brain volume/data/bv.rda")
load("~/Dropbox/Junrui Di/brain volume/data/round4/sleep2exlcudenumber.rda")
analysis_sleep = merge(x = sleep, y = bv, all.x = T)
summary(lm(log(hippocampus) ~ log(icv) + age + sex + educ_years + black + other + CESD +
sleep_PC1 + sleep_PC2 + sleep_PC3 + sleep_PC4 + sleep_PC5 + sleep_PC6 ,data = analysis_sleep))
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
