M2 = (t(x) %*% x)/(nrow(x)-1)
View(x)
View(x)
View(x)
xx = x%*%x
xx = x%o%x
xx = M2%o%M2
rm(list = ls())
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
x.list = split(x,seq(nrow(x)))
check1 = (t(x) %*% Y)/(nrow(x)-1)
y0 = rep(0,7)
check2 = y0 %o% y0 %o% y0
for( i in 1:nrow(x)){
check2 = check2+ x.list[[i]] %o% x.list[[i]]
}
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
x.list = split(x,seq(nrow(x)))
check1 = (t(x) %*% x)/(nrow(x)-1)
y0 = rep(0,7)
check2 = y0 %o% y0
for( i in 1:nrow(x)){
check2 = check2+ x.list[[i]] %o% x.list[[i]]
}
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
x.list = split(x,seq(nrow(x)))
check1 = (t(x) %*% x)
y0 = rep(0,7)
check2 = y0 %o% y0
for( i in 1:nrow(x)){
check2 = check2+ x.list[[i]] %o% x.list[[i]]
}
c(sum(check1-check2))
a = c(1:4)
a%*%a
t(a)*a
x.list
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
x.list = split(x,seq(nrow(x)))
x.listy
x.list
x.list[[1]]
x.list[[1]][1]
rm(list = ls())
x = mtcars[,1:7]
x.list = split(x,seq(nrow(x)))
x.list
tx = t(x)
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
x = mtcars[,1:7]
tx = t(x)
x.list = split(tx,seq(nrow(tx)))
x.list
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
tx = t(x)
x.list = split(tx,seq(nrow(tx)))
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
View(x)
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
XpX = (t(x) %*% x)
check1 = XpX %o% XpX
View(XpX)
check2 = rep(0,7) %o% rep(0,7) %o% rep(0,7)
x
rm(list = ls())
x = mtcars[,1:7]
x = scale(x, center = T, scale = F)
XpX = (t(x) %*% x)
check1 = XpX %o% XpX
a=1
b=1
b=2
x[,a]*x[,b]
check2 = rep(0,7) %o% rep(0,7) %o% rep(0,7)
for(a in 1:7){
for(b in 1:7){
for(c in 1:7){
for(d in 1:7){
check2[a,b,c,d] = sum(x[,a]*x[,b])*sum(x[,c]*x[,d])+sum(x[,a]*x[,c])*sum(x[,b]*x[,d])+sum(x[,a]*x[,d])*sum(x[,b]*x[,c])
}
}
}
}
a= 1
b=2
c=3
d=4
sum(x[,a]*x[,b])
sum(x[,a]*x[,b])*sum(x[,c]*x[,d])
sum(x[,a]*x[,c])*sum(x[,b]*x[,d])
check1
sum(x[,a]*x[,b])*sum(x[,c]*x[,d])+sum(x[,a]*x[,c])*sum(x[,b]*x[,d])+sum(x[,a]*x[,d])*sum(x[,b]*x[,c])
check1[1,2,3,4]
check2 = rep(0,7) %o% rep(0,7) %o% rep(0,7)%o% rep(0,7)
for(a in 1:7){
for(b in 1:7){
for(c in 1:7){
for(d in 1:7){
check2[a,b,c,d] = sum(x[,a]*x[,b])*sum(x[,c]*x[,d])+sum(x[,a]*x[,c])*sum(x[,b]*x[,d])+sum(x[,a]*x[,d])*sum(x[,b]*x[,c])
}
}
}
}
x1 = sort(c(check1))
x2 = sort(c(check2))
x[,a]
View(x)
a=1
b=2
x[,a]*x[,b]
rm(list = ls())
x = mtcars[,1:7]
View(x)
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
Y = Y[1:100,1:10]
Y = scale(Y, center = T, scale = F)
YpY1 = (t(Y) %*% Y)
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
Y = Y[1:100,1:10]
Y = scale(Y, center = T, scale = F)
Y.list = split(Y, seq(nrow(Y)))
YpY1 = (t(Y) %*% Y)
y0 = rep(0,10)
YPY2 = y0 %o% y0
for( i in 1:nrow(Y)){
YPY2 = YPY2+  Y.list[[i]] %o% Y.list[[i]]
}
View(YpY1)
View(YPY2)
Y = hr[,-1]
Y = Y[1:100,1:10]
Y = scale(Y, center = T, scale = F)
Y.list = split(Y, seq(nrow(Y)))
YpY = (t(Y) %*% Y)
Y04 = y0 %o% y0 %o% y0 %o% y0
for( i in 1:nrow(Y)){
Y04 = Y04+  Y.list[[i]] %o% Y.list[[i]] %o% Y.list[[i]] %o% Y.list[[i]]
}
YpYo2 = YpY %o% YpY
YpYo2
View(Y)
check2 = rep(0,10) %o% rep(0,10) %o% rep(0,10)%o% rep(0,10)
for(a in 1:10){
for(b in 1:10){
for(c in 1:10){
for(d in 1:10){
check2[a,b,c,d] = sum(Y[,a]*Y[,b])*sum(Y[,c]*Y[,d])+sum(Y[,a]*Y[,c])*sum(Y[,b]*Y[,d])+sum(Y[,a]*Y[,d])*sum(Y[,b]*Y[,c])
}
}
}
}
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
#Y = Y[1:100,1:10]
Y = scale(Y, center = T, scale = F)
Y.list = split(Y, seq(nrow(Y)))
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
Y = scale(Y, center = T, scale = F)
Y.list = split(Y, seq(nrow(Y)))
YpY = (t(Y) %*% Y)
YpYo2 = YpY %o% YpY
check2 = rep(0,24) %o% rep(0,24) %o% rep(0,24)%o% rep(0,24)
for(a in 1:24){
for(b in 1:24){
for(c in 1:24){
for(d in 1:24){
check2[a,b,c,d] = sum(Y[,a]*Y[,b])*sum(Y[,c]*Y[,d])+sum(Y[,a]*Y[,c])*sum(Y[,b]*Y[,d])+sum(Y[,a]*Y[,d])*sum(Y[,b]*Y[,c])
}
}
}
}
dim(T222)
dim(check2)
check2[1,3,3,1]
check2[1,3,1,3]
check2[1,3,1,4]
T222 = check2
n = nrow(Y)
K4 = (n*(n+1))/((n-1)*(n-2)*(n-3)) * Y04 - 1/((n-2)*(n-3)) * T222
Y04 = rep(0,24) %o% rep(0,24) %o% rep(0,24)%o% rep(0,24)
for( i in 1:nrow(Y)){
Y04 = Y04+  Y.list[[i]] %o% Y.list[[i]] %o% Y.list[[i]] %o% Y.list[[i]]
}
K4 = (n*(n+1))/((n-1)*(n-2)*(n-3)) * Y04 - 1/((n-2)*(n-3)) * T222
isSymmetric(K4)
K4[1,2,3,4]
K4[1,2,4,3]
K4[1,4,2,3]
K4[1,4,2,4]
save(K4, file = "~/Desktop/K4.rda")
load("/Users/junruidi/Downloads/K4.rda")
kk = k4
load("/Users/junruidi/Desktop/K4.rda")
load("/Users/junruidi/Downloads/K4.rda")
kk = K4
load("/Users/junruidi/Desktop/K4.rda")
sum(c(kk - K4))
#1. score_K3 v.s. age
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/score_K3.rda")
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/cov.rda")
age = subset(cov, select = c(SEQN,age))
names(age)[1] = "ID"
View(age)
View(score_K3)
#1. score_K3 v.s. age
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/score_K3.rda")
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/cov.rda")
dim(score_K3)
i = 1
plot(cov$age,score_K3[,i])
plot(cov$age,score_K3[,i],pch = 19)
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_K3.pdf")
par(mfrow=c(3,1))
for(i in 1:24){
plot(cov$age,score_K3[,i],pch = 19,xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
View(cov)
View(score_K3)
View(cov)
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_K3.pdf")
par(mfrow=c(3,1))
for(i in 1:24){
plot(cov$age,score_K3[,i],pch = 19,type = "l",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
dat = cbind(score_K3,cov$age)
dim(dat)
dat = dat[order(dat[,25]),]
View(dat)
for(i in 1:24){
plot(dat[,25],dat[,i],pch = 19,type = "l",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_K3.pdf")
par(mfrow=c(3,1))
dat = cbind(score_K3,cov$age)
dat = dat[order(dat[,25]),]
for(i in 1:24){
plot(dat[,25],dat[,i],type = "h",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_K3.pdf")
par(mfrow=c(1,1))
dat = cbind(score_K3,cov$age)
dat = dat[order(dat[,25]),]
for(i in 1:24){
plot(dat[,25],dat[,i],type = "h",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
plot(dat[,25],dat[,1],type = "h",xlab = "Age", ylab = paste0("score-",i))
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/score_K4.rda")
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/cov.rda")
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_K4.pdf")
par(mfrow=c(1,1))
dat = cbind(score_K4,cov$age)
dat = dat[order(dat[,25]),]
for(i in 1:24){
plot(dat[,25],dat[,i],type = "h",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/score_X3.rda.rda")
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/cov.rda")
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_X3.pdf")
par(mfrow=c(1,1))
dat = cbind(score_X3,cov$age)
dat = dat[order(dat[,25]),]
for(i in 1:24){
plot(dat[,25],dat[,i],type = "h",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/score_X3.rda")
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/cov.rda")
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_X3.pdf")
par(mfrow=c(1,1))
dat = cbind(score_X3,cov$age)
dat = dat[order(dat[,25]),]
for(i in 1:24){
plot(dat[,25],dat[,i],type = "h",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
dim(cpv)
dim(score_X3)
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/score_X3.rda")
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/cov.rda")
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_X3.pdf")
par(mfrow=c(1,1))
dat = cbind(score_X3,cov$age)
dat = dat[order(dat[,13]),]
for(i in 1:12){
plot(dat[,14],dat[,i],type = "h",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/score_X3.rda")
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round6/cov.rda")
pdf(file = "~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/script/round6/age_X3.pdf")
par(mfrow=c(1,1))
dat = cbind(score_X3,cov$age)
dat = dat[order(dat[,13]),]
View(dat)
for(i in 1:12){
plot(dat[,13],dat[,i],type = "h",xlab = "Age", ylab = paste0("score-",i))
}
dev.off()
########3rd order tensor#################
#1. get the whiten matrix: goal of whiten is to achieve reduction
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
Y = Y[1:100,]
Y = scale(Y, center = T, scale = F)
tY = t(Y)
Y.list = split(tY, seq(nrow(tY)))
y0 = rep(0,dim(tY)[2])
G3 = y0 %o% y0 %o% y0
for( i in 1:nrow(tY)){
G3 = G3+ Y.list[[i]] %o% Y.list[[i]] %o% Y.list[[i]]
}
dim(G3)
# all functions for 3rd order tensor OD
Xvv = function(X,v){
dimX = dim(X)[1]
z = NULL
for(i in 1:dimX){
aa = 0
for(j in 1:dimX){
for(l in 1:dimX){
aa = aa + X[j,l,i] * v[j] * v[l]
}
}
z = c(z,aa)
}
return(z)
}
#function to calcaulte multilinear form e (dot product between tenor T and vector \theta).g. T(\theta,\theta,\theta)
Xvvv = function(X,v){
lm  = dim(X)[1]
zz = 0
for(j3 in 1:lm){
for(j2 in 1:lm){
for(j1 in 1:lm){
zz = zz +  X[j1, j2, j3] * v[j1] * v[j2] * v[j3]
}
}
}
return(zz)
}
#inner power iteration update, use (7) in Anandkumar paper
power_itr = function(theta, X,N){
for(i in 1:N){
next_itr = Xvv(X, v = theta)
theta = next_itr/sqrt(sum(next_itr^2))
}
return(theta)
}
#select the best theta, lambda, and deflate the original tensor
Est_PI = function(X, L=10, N=10){
p = dim(X)[1]
theta_list = list()
for ( t in 1:L){
vc = rnorm(p)
theta_0 = vc/sqrt(sum(vc^2))
theta_list[[t]] = power_itr(theta = theta_0, X=X, N=N)
}
lambda_list = NULL
for(t in 1:L){
lambda_t = Xvvv(X = X, v = theta_list[[t]])
lambda_list = c(lambda_list,lambda_t)
}
ind = which.max(lambda_list)
theta_tau = theta_list[[ind]]
theta_hat = power_itr(theta = theta_tau, X=X, N=N)
lambda_hat = Xvvv(X = X, v = theta_hat)
#lambda_hat = lambda_list[[ind]]
def_X = X - lambda_hat * theta_hat %o% theta_hat %o% theta_hat
result = list("theta_hat" = theta_hat, "lambda_hat" = lambda_hat, "def_X" = def_X)
return(result)
}
library(far)
X = G3
L =10
N= 10
p = dim(X)[1]
# eigenv = matrix(NA, nrow = p,ncol = 1)
# eigenl = NULL
result.1 = Est_PI(X = X, L = L, N = N)
eigenv = matrix(result.1$theta_hat,nrow = length(result.1$theta_hat))
eigenl = result.1$lambda_hat
X = result.1$def_X
result.m = Est_PI(X = X, L = L, N = N)
eigenv = cbind(eigenv, result.m$theta_hat)
eigenl = c(eigenl, result.m$lambda_hat)
X = result.m$def_X
result.m = Est_PI(X = X, L = L, N = N)
load("/Users/junruidi/Dropbox/Junrui Di/Oral Exam/results/features/circadianht.rda")
View(circadian.ht)
load("/Users/junruidi/Dropbox/Junrui Di/brain volume/data/round5/corsinor.rda")
View(corsinor)
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
Y = scale(Y, center = T, scale = F)
Y.list = split(Y, seq(nrow(Y)))
M2 =(t(Y) %*% Y)/(nrow(Y)-1)
summary( prcomp(Y,center = F, scale. = F))
#first 11 pc preserves 90% of the total variation
k = 12
U = prcomp(Y,center = F, scale. = F)$rotation[,1:k]
D = diag(eigen(M2)$values[1:k])
library(MASS)
W1 = U %*% sqrt(ginv(D))
W1 = U %*% sqrt(ginv(D))
W2 = U %*% sqrt(ginv(D)) %*% t(U)
Yp1 = Y %*% W1
Yp2 = Y %*% W2
I1 = cov(Yp1)
I2 = cov(Yp2)
xx = t(W2) %*% M2 %*% t(W1)
xx = t(W2) %*% M2 %*% t(W2)
View(xx)
View(W1)
View(W2)
View(W1)
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
Y = scale(Y, center = T, scale = F)
Y.list = split(Y, seq(nrow(Y)))
M2 =(t(Y) %*% Y)/(nrow(Y)-1)
summary( prcomp(Y,center = F, scale. = F))
#first 11 pc preserves 90% of the total variation
k = 24
U = prcomp(Y,center = F, scale. = F)$rotation[,1:k]
D = diag(eigen(M2)$values[1:k])
MM2 = U %*% D %*% t(U)
D
Dp1 = sqrt(1/D)
Dp2 = sqrt(ginv(D))
View(Dp1)
View(Dp2)
diag(Dp1) - diag(店铺)
diag(Dp1) - diag(Dp2)
x = U%*%t(U)
View(x)
View(x)
sum(c(x))
x = t(U)%*%U
View(x)
sum(c(x))
x = U %*% sqrt(ginv(D))%*%t(U) %*% U %*% D %*% t(U) %*% U %*% sqrt(ginv(D))%*%t(U)
View(x)
W2 = U %*% sqrt(ginv(D)) %*% t(U)
xx = t(W2) %*% M2 %*% W2
View(xx)
Yp2 = Y %*% W2
I2 = cov(Yp2)
View(I2)
rm(list = ls())
load("~/Dropbox/Junrui Di/MAMC/tensor decompostion analysis/data/round3/hr.rda")
Y = hr[,-1]
Y = scale(Y, center = T, scale = F)
Y.list = split(Y, seq(nrow(Y)))
M2 =(t(Y) %*% Y)/(nrow(Y)-1)
summary( prcomp(Y,center = F, scale. = F))
#first 11 pc preserves 90% of the total variation
k = 12
U = prcomp(Y,center = F, scale. = F)$rotation[,1:k]
D = diag(eigen(M2)$values[1:k])
library(MASS)
W1 = U %*% sqrt(ginv(D))
W2 = U %*% sqrt(ginv(D)) %*% t(U)
x = U %*% sqrt(ginv(D)) %*% t(U) %*% M2 %*% U %*% sqrt(ginv(D)) %*% t(U)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
