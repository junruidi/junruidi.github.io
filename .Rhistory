mat = as.data.frame(rle2(dthresh))
mat = subset(na.omit(mat),values == 1)
badperiod = sum(mat$lengths >= 120)
}
if(sum(dthresh,na.rm = T) == 0){
badperiod = 0
}
newdef_delta1$Period[i] = badperiod
}
#delta 2
Idlist2 = unique(delta2$ID)
newdef_delta2 = data.frame(ID = Idlist2, Period = NA)
for(i in 1:length(Idlist2)){
id.i = Idlist2[i]
dat.i = subset(delta2, ID == id.i)
tstart = min(dat.i$TOA)
tend = max(dat.i$TOA)
tseq = data.frame(TOA = as.POSIXct(timeSequence(tstart,tend,by = "min",FinCenter="UTC")))
dat.i = merge(x = tseq, y = dat.i, all.x = T)
dthresh = ifelse(dat.i$d2 <= thresh, 1, 0)
if(sum(dthresh,na.rm = T) > 0){
mat = as.data.frame(rle2(dthresh))
mat = subset(na.omit(mat),values == 1)
badperiod = sum(mat$lengths >= 120)
}
if(sum(dthresh,na.rm = T) == 0){
badperiod = 0
}
newdef_delta2$Period[i] = badperiod
}
AC_delta1 = newdef_delta1$ID[which(newdef_delta1$Period > 0)]
AC_delta2 = newdef_delta2$ID[which(newdef_delta2$Period > 0)]
load("~/Dropbox/Junrui Di/PACS Modeling/outcome/outcome.rda")
load("~/Dropbox/Junrui Di/PACS Modeling/Explore0405/data/toremove.rda")
IDkeep = union(unique(delta1$ID),unique(delta2$ID))
outcome = subset(outcome, ID %in% IDkeep)
outcome$group1 = factor(outcome$group1, levels = c("High","Medium","Low"))
outcome$group2 = outcome$group1
outcome = subset(outcome, select = c(ID,group2))
remove_id = c(1560, 2797, 1692, 1606, 1648, 1650, 1705, 5718, 5798)
outcome = subset(outcome, !ID %in% remove_id)
overall = outcome
ACS_DM = union(AC_delta1,AC_delta2)
overall$AC_new = ifelse(overall$ID %in% ACS_DM, "AC", "No")
all_tab = as.data.frame.matrix(table(overall$AC_new, overall$group2))
all_sens = sens_tab(all_tab)
overall_remove1 = subset(overall, ! ID %in% remove_1)
all_tab_1 = as.data.frame.matrix(table(overall_remove1$AC_new, overall_remove1$group2))
all_sens_1 = sens_tab(all_tab_1)
overall_remove2 = subset(overall, ! ID %in% remove_2)
all_tab_2 = as.data.frame.matrix(table(overall_remove2$AC_new, overall_remove2$group2))
all_sens_2 = sens_tab(all_tab_2)
D1 = subset(outcome, ID %in% newdef_delta1$ID)
D1$delta1_AC_new = ifelse(D1$ID %in% AC_delta1, "AC", "No")
D2 = subset(outcome, ID %in% newdef_delta2$ID)
D2$delta2_AC_new = ifelse(D2$ID %in% AC_delta2, "AC", "No")
D1_remove1 = subset(D1, ! ID %in% remove_1)
D2_remove1 = subset(D2, ! ID %in% remove_1)
D1_remove2 = subset(D1, ! ID %in% remove_2)
D2_remove2 = subset(D2, ! ID %in% remove_2)
ant_tab = as.data.frame.matrix(table(D1$delta1_AC_new, D1$group2))
pos_tab = as.data.frame.matrix(table(D2$delta2_AC_new, D2$group2))
ant_sens = sens_tab(ant_tab)
pos_sens = sens_tab(pos_tab)
ant_tab1 = as.data.frame.matrix(table(D1_remove1$delta1_AC_new, D1_remove1$group2))
pos_tab1 = as.data.frame.matrix(table(D2_remove1$delta2_AC_new, D2_remove1$group2))
ant_sens1 = sens_tab(ant_tab1)
pos_sens1 = sens_tab(pos_tab1)
ant_tab2 = as.data.frame.matrix(table(D1_remove2$delta1_AC_new, D1_remove2$group2))
pos_tab2 = as.data.frame.matrix(table(D2_remove2$delta2_AC_new, D2_remove2$group2))
ant_sens2 = sens_tab(ant_tab2)
pos_sens2 = sens_tab(pos_tab2)
tb = cbind(ant_tab,pos_tab,all_tab)
tb1 = cbind(ant_tab1,pos_tab1,all_tab_1)
tb2 = cbind(ant_tab2,pos_tab2,all_tab_2)
tb$thresh = tb1$thresh = tb2$thresh = thresh
table.count = rbind(table.count,tb)
table.count1 = rbind(table.count1,tb1)
table.count2 = rbind(table.count2,tb2)
sens = as.data.frame(cbind(t(ant_sens),t(pos_sens),t(all_sens)))
sens1 = as.data.frame(cbind(t(ant_sens1),t(pos_sens1),t(all_sens_1)))
sens2 = as.data.frame(cbind(t(ant_sens2),t(pos_sens2),t(all_sens_2)))
sens$thresh = sens1$thresh = sens2$thresh = thresh
table.sensitivity = rbind(table.sensitivity,sens)
table.sensitivity1 = rbind(table.sensitivity1,sens1)
table.sensitivity2 = rbind(table.sensitivity2,sens2)
}
getwd
getwd()
write.csv(table.count, file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/tab.csv",row.names = F)
write.csv(table.count1, file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/tab1.csv",row.names = F)
write.csv(table.count2, file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/tab2.csv",row.names = F)
write.csv(table.sensitivity, file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/sens.csv",row.names = F)
write.csv(table.sensitivity1, file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/sens1.csv",row.names = F)
write.csv(table.sensitivity2, file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/sens2.csv",row.names = F)
sum(remove_1 %in% D1$ID)
sum(remove_1 %in% D2$ID)
# Explore the likelihood score and variability (MAD)
rm(list = ls())
setwd("~/Dropbox/Junrui Di/PACS Modeling/outcome/")
load("alldata.rda")
remove_id = c(1560, 2797, 1692, 1606, 1648, 1650, 1705, 5718, 5798)
alldata = subset(alldata, !ID %in% remove_id)
all_likelihood = subset(alldata, select = c(ID, Likelihood))
library(dplyr)
all_likelihood = na.omit(all_likelihood)
median_abs_dev = function(x,na.rm){return(median(abs(x - median(x))))}
median_likelihood = all_likelihood %>% group_by(ID) %>% summarise(med_score = median(Likelihood), mad_score = median_abs_dev(Likelihood))
# median_likelihood$med_score = round(median_likelihood$med_score,4)
# median_likelihood$mad_score = round(median_likelihood$mad_score,4)
median_likelihood$group1 = "Low"
median_likelihood$group1[which(median_likelihood$med_score>0.3 & median_likelihood$med_score<=0.7)] = "Medium"
median_likelihood$group1[which(median_likelihood$med_score>0.7)] = "High"
median_likelihood$group1 = factor(median_likelihood$group1, levels = c("Low","Medium","High"))
# #compare to see if medians are the same as in the outcomefile
# load("D:/Dropbox/Junrui Di/PACS Modeling/outcome/outcome.rda")
# remove_id = c(1560, 2797, 1692, 1606, 1648, 1650, 1705, 5718, 5798)
# outcome = subset(outcome, !ID %in% remove_id)
png(file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/medianplot.png", units = "in",
width = 10,height = 7, res = 300)
plot(x = median_likelihood$med_score, y = median_likelihood$mad_score,pch = 19,
col = c("red","blue","green")[median_likelihood$group1],
xlab = "Median Likelihood", ylab = "Median Absolute Deviation",
ylim = c(0,0.3),axes = F,
main = "Median v.s. Variation with Pannels")
abline(v = c(0.3,0.7), lty = 3)
abline(a = 0.3, b = -1, lty = 3)
abline(a = -0.7, b = 1, lty = 3)
axis(1, pos=0)
axis(2, pos=0)
dev.off()
one = median_likelihood$ID[which(median_likelihood$group1 == "Low" & (median_likelihood$med_score + median_likelihood$mad_score) > 0.300000001)]
two = median_likelihood$ID[which(median_likelihood$group1 == "High" & (median_likelihood$med_score - median_likelihood$mad_score) < 0.6999999999)]
remove_1 = union(one,two)
new_dat_1 = subset(median_likelihood, ! ID %in% remove_1)
png(file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/medianplot_remove.png", units = "in",
width = 10,height = 7, res = 300)
plot(x = new_dat_1$med_score, y = new_dat_1$mad_score,pch = 19,
col = c("red","blue","green")[new_dat_1$group1],
xlab = "Median Likelihood", ylab = "Median Absolute Deviation",
ylim = c(0,0.3),axes = F,
main = "Median v.s. Variation with Pannels")
abline(v = c(0.3,0.7), lty = 3)
abline(a = 0.3, b = -1, lty = 3)
abline(a = -0.7, b = 1, lty = 3)
axis(1, pos=0)
axis(2, pos=0)
dev.off()
library(ggplot2)
library(lattice)
label_toplot = merge(x = all_likelihood, y = median_likelihood, all.x = T)
label_toplot = label_toplot[order(label_toplot[,5],label_toplot[,4],label_toplot[,1]),]
order_id_list = unique(label_toplot$ID)
label_toplot$newID = 0
for(i in 1:length(order_id_list)){
id.i = order_id_list[i]
label_toplot$newID[which(label_toplot$ID == id.i)] = i
}
# boxplot(Likelihood ~ newID, data = label_toplot, ylab = 'Likelihood',xaxt = "n")
# stripchart(Likelihood ~ newID, vertical = TRUE, data = label_toplot,
#            method = "jitter", add = TRUE, pch = 20, col = c("red","blue","green")[label_toplot$group1])
# abline(h = 0.3,lty = 3)
# abline(h = 0.7, lty = 3)
#
# boxplot(Likelihood ~ newID, data = label_toplot, ylab = 'Likelihood',xaxt = "n",outline=F, varwidth=T)
# stripchart(label_toplot[label_toplot$group1 == "Low", "Likelihood"] ~ label_toplot[label_toplot$group1 == "Low", "newID"], add=T, vertical=T, pch=21, bg=c("red"), method='jitter', jitter=0.02)
# stripchart(label_toplot[label_toplot$group1 == "Medium", "Likelihood"] ~ label_toplot[label_toplot$group1 == "Medium", "newID"], add=T, vertical=T, pch=21, bg=c("blue"), method='jitter', jitter=0.02)
label_toplot$newID2 = factor(label_toplot$newID,levels = as.character(c(1:182)),order = T)
names(label_toplot)[5] = "Category"
png(file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/allsubjects.png", res = 300, width = 25, height = 7,units = "in")
ggplot(label_toplot, aes(x = newID2, y = Likelihood, col = Category)) +
geom_boxplot(alpha = 0) +
geom_point(alpha=1, position = position_jitter(w = 0.05, h = 0)) +
theme(axis.ticks.x = element_blank(),
axis.text.x=element_blank()) +
xlab("Subjects") +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_hline(yintercept =c(0.3,0.7), size = 1.2,linetype = "dotted")
dev.off()
ldat = subset(label_toplot, Category == "Low")
View(ldat)
library(dplyr)
ldat.max = ldat %>% group_by(ID) %>% summarise(maxlik = max(Likelihood))
ldat.max
View(ldat.max)
ldat.max$ID[which(ldat.max$maxlik > 0.3)]
low = unique(label_toplot$ID[which(label_toplot$Likelihood > 0.3 & label_toplot$Category == "Low")])
low
sum(ldat.max$ID[which(ldat.max$maxlik > 0.3)] %in% low)
sort(ldat.max$ID[which(ldat.max$maxlik > 0.3)])
sort(low)
hdat = subset(label_toplot, Category == "High")
hdat.min = hdat %>% group_by(ID) %>% summarise(minlik = min(Likelihood))
hdat.min$ID[which(hdat.min$minlik <= 0.7)]
high = unique(label_toplot$ID[which(label_toplot$Likelihood <= 0.7 & label_toplot$Category == "High")])
sort(high)
# Explore the likelihood score and variability (MAD)
rm(list = ls())
setwd("~/Dropbox/Junrui Di/PACS Modeling/outcome/")
load("alldata.rda")
remove_id = c(1560, 2797, 1692, 1606, 1648, 1650, 1705, 5718, 5798)
alldata = subset(alldata, !ID %in% remove_id)
all_likelihood = subset(alldata, select = c(ID, Likelihood))
library(dplyr)
all_likelihood = na.omit(all_likelihood)
median_abs_dev = function(x,na.rm){return(median(abs(x - median(x))))}
median_likelihood = all_likelihood %>% group_by(ID) %>% summarise(med_score = median(Likelihood), mad_score = median_abs_dev(Likelihood))
# median_likelihood$med_score = round(median_likelihood$med_score,4)
# median_likelihood$mad_score = round(median_likelihood$mad_score,4)
median_likelihood$group1 = "Low"
median_likelihood$group1[which(median_likelihood$med_score>0.3 & median_likelihood$med_score<=0.7)] = "Medium"
median_likelihood$group1[which(median_likelihood$med_score>0.7)] = "High"
median_likelihood$group1 = factor(median_likelihood$group1, levels = c("Low","Medium","High"))
# #compare to see if medians are the same as in the outcomefile
# load("D:/Dropbox/Junrui Di/PACS Modeling/outcome/outcome.rda")
# remove_id = c(1560, 2797, 1692, 1606, 1648, 1650, 1705, 5718, 5798)
# outcome = subset(outcome, !ID %in% remove_id)
png(file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/medianplot.png", units = "in",
width = 10,height = 7, res = 300)
plot(x = median_likelihood$med_score, y = median_likelihood$mad_score,pch = 19,
col = c("red","blue","green")[median_likelihood$group1],
xlab = "Median Likelihood", ylab = "Median Absolute Deviation",
ylim = c(0,0.3),axes = F,
main = "Median v.s. Variation with Pannels")
abline(v = c(0.3,0.7), lty = 3)
abline(a = 0.3, b = -1, lty = 3)
abline(a = -0.7, b = 1, lty = 3)
axis(1, pos=0)
axis(2, pos=0)
dev.off()
one = median_likelihood$ID[which(median_likelihood$group1 == "Low" & (median_likelihood$med_score + median_likelihood$mad_score) > 0.300000001)]
two = median_likelihood$ID[which(median_likelihood$group1 == "High" & (median_likelihood$med_score - median_likelihood$mad_score) < 0.6999999999)]
remove_1 = union(one,two)
new_dat_1 = subset(median_likelihood, ! ID %in% remove_1)
png(file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/medianplot_remove.png", units = "in",
width = 10,height = 7, res = 300)
plot(x = new_dat_1$med_score, y = new_dat_1$mad_score,pch = 19,
col = c("red","blue","green")[new_dat_1$group1],
xlab = "Median Likelihood", ylab = "Median Absolute Deviation",
ylim = c(0,0.3),axes = F,
main = "Median v.s. Variation with Pannels")
abline(v = c(0.3,0.7), lty = 3)
abline(a = 0.3, b = -1, lty = 3)
abline(a = -0.7, b = 1, lty = 3)
axis(1, pos=0)
axis(2, pos=0)
dev.off()
library(ggplot2)
library(lattice)
label_toplot = merge(x = all_likelihood, y = median_likelihood, all.x = T)
label_toplot = label_toplot[order(label_toplot[,5],label_toplot[,4],label_toplot[,1]),]
order_id_list = unique(label_toplot$ID)
label_toplot$newID = 0
for(i in 1:length(order_id_list)){
id.i = order_id_list[i]
label_toplot$newID[which(label_toplot$ID == id.i)] = i
}
# boxplot(Likelihood ~ newID, data = label_toplot, ylab = 'Likelihood',xaxt = "n")
# stripchart(Likelihood ~ newID, vertical = TRUE, data = label_toplot,
#            method = "jitter", add = TRUE, pch = 20, col = c("red","blue","green")[label_toplot$group1])
# abline(h = 0.3,lty = 3)
# abline(h = 0.7, lty = 3)
#
# boxplot(Likelihood ~ newID, data = label_toplot, ylab = 'Likelihood',xaxt = "n",outline=F, varwidth=T)
# stripchart(label_toplot[label_toplot$group1 == "Low", "Likelihood"] ~ label_toplot[label_toplot$group1 == "Low", "newID"], add=T, vertical=T, pch=21, bg=c("red"), method='jitter', jitter=0.02)
# stripchart(label_toplot[label_toplot$group1 == "Medium", "Likelihood"] ~ label_toplot[label_toplot$group1 == "Medium", "newID"], add=T, vertical=T, pch=21, bg=c("blue"), method='jitter', jitter=0.02)
label_toplot$newID2 = factor(label_toplot$newID,levels = as.character(c(1:182)),order = T)
names(label_toplot)[5] = "Category"
png(file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/allsubjects.png", res = 300, width = 25, height = 7,units = "in")
ggplot(label_toplot, aes(x = newID2, y = Likelihood, col = Category)) +
geom_boxplot(alpha = 0) +
geom_point(alpha=1, position = position_jitter(w = 0.05, h = 0)) +
theme(axis.ticks.x = element_blank(),
axis.text.x=element_blank()) +
xlab("Subjects") +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_hline(yintercept =c(0.3,0.7), size = 1.2,linetype = "dotted")
dev.off()
low = unique(label_toplot$ID[which(label_toplot$Likelihood > 0.3 & label_toplot$Category == "Low")])
high = unique(label_toplot$ID[which(label_toplot$Likelihood <= 0.7 & label_toplot$Category == "High")])
remove_2 = union(low,high)
new_dat_2 = subset(label_toplot, ! ID %in% remove_2)
png(file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/results/allsubjects_remove.png", res = 300, width = 25, height = 7,units = "in")
ggplot(new_dat_2, aes(x = newID2, y = Likelihood, col = Category)) +
geom_boxplot(alpha = 0) +
geom_point(alpha=1, position = position_jitter(w = 0.05, h = 0)) +
theme(axis.ticks.x = element_blank(),
axis.text.x=element_blank()) +
xlab("Subjects") +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_hline(yintercept =c(0.3,0.7), size = 1.2,linetype = "dotted")
dev.off()
save(remove_1, remove_2, file = "~/Dropbox/Junrui Di/PACS Modeling/Explore0405/data/toremove.rda")
#1. create the confusion matrix at different thresh
rm(list = ls())
setwd("~/Dropbox/Junrui Di/PACS Modeling/Explore0122/")
load("data/dat.rda")
library(accelerometry)
require(timeDate)
require(qdapTools)
require(lubridate)
require(gdata)
#1. create the confusion matrix at different thresh
rm(list = ls())
setwd("~/Dropbox/Junrui Di/PACS Modeling/Explore0122/")
load("data/dat.rda")
library(accelerometry)
require(timeDate)
require(qdapTools)
require(lubridate)
require(gdata)
sens_tab = function(x){
x = subset(x, select = -c(Medium))
sens = x[1,1]/sum(x$High)
spec = x[2,2]/sum(x$Low)
ppv = x[1,1]/sum(x[1,])
npv = x[2,2]/sum(x[2,])
return(round(c(sens,spec,ppv,npv),2))
}
table.count = data.frame()
table.sensitivity = data.frame()
table.count1 = data.frame()
table.sensitivity1 = data.frame()
table.count2 = data.frame()
table.sensitivity2 = data.frame()
ths = c(30,25,20,15,10)
k = 1
thresh = ths[k]
Idlist1 = unique(delta1$ID)
newdef_delta1 = data.frame(ID = Idlist1, Period = NA)
for(i in 1:length(Idlist1)){
id.i = Idlist1[i]
dat.i = subset(delta1, ID == id.i)
tstart = min(dat.i$TOA)
tend = max(dat.i$TOA)
tseq = data.frame(TOA = as.POSIXct(timeSequence(tstart,tend,by = "min",FinCenter="UTC")))
dat.i = merge(x = tseq, y = dat.i, all.x = T)
dthresh = ifelse(dat.i$d1 <= thresh, 1, 0)
if(sum(dthresh,na.rm = T) > 0){
mat = as.data.frame(rle2(dthresh))
mat = subset(na.omit(mat),values == 1)
badperiod = sum(mat$lengths >= 120)
}
if(sum(dthresh,na.rm = T) == 0){
badperiod = 0
}
newdef_delta1$Period[i] = badperiod
}
#delta 2
Idlist2 = unique(delta2$ID)
newdef_delta2 = data.frame(ID = Idlist2, Period = NA)
for(i in 1:length(Idlist2)){
id.i = Idlist2[i]
dat.i = subset(delta2, ID == id.i)
tstart = min(dat.i$TOA)
tend = max(dat.i$TOA)
tseq = data.frame(TOA = as.POSIXct(timeSequence(tstart,tend,by = "min",FinCenter="UTC")))
dat.i = merge(x = tseq, y = dat.i, all.x = T)
dthresh = ifelse(dat.i$d2 <= thresh, 1, 0)
if(sum(dthresh,na.rm = T) > 0){
mat = as.data.frame(rle2(dthresh))
mat = subset(na.omit(mat),values == 1)
badperiod = sum(mat$lengths >= 120)
}
if(sum(dthresh,na.rm = T) == 0){
badperiod = 0
}
newdef_delta2$Period[i] = badperiod
}
AC_delta1 = newdef_delta1$ID[which(newdef_delta1$Period > 0)]
AC_delta2 = newdef_delta2$ID[which(newdef_delta2$Period > 0)]
load("~/Dropbox/Junrui Di/PACS Modeling/outcome/outcome.rda")
load("~/Dropbox/Junrui Di/PACS Modeling/Explore0405/data/toremove.rda")
IDkeep = union(unique(delta1$ID),unique(delta2$ID))
outcome = subset(outcome, ID %in% IDkeep)
outcome$group1 = factor(outcome$group1, levels = c("High","Medium","Low"))
outcome$group2 = outcome$group1
outcome = subset(outcome, select = c(ID,group2))
remove_id = c(1560, 2797, 1692, 1606, 1648, 1650, 1705, 5718, 5798)
outcome = subset(outcome, !ID %in% remove_id)
overall = outcome
ACS_DM = union(AC_delta1,AC_delta2)
overall$AC_new = ifelse(overall$ID %in% ACS_DM, "AC", "No")
all_tab = as.data.frame.matrix(table(overall$AC_new, overall$group2))
all_sens = sens_tab(all_tab)
all_tab
all_sens
5/7
80/138
5/63
80/82
x = all_tab
x = subset(x, select = -c(Medium))
View(x)
sens = x[1,1]/sum(x$High)
spec = x[2,2]/sum(x$Low)
ppv = x[1,1]/sum(x[1,])
npv = x[2,2]/sum(x[2,])
round(c(sens,spec,ppv,npv),2)
length(unique(newdef_delta1$ID))
length(unique(newdef_delta2$ID))
D1 = subset(outcome, ID %in% newdef_delta1$ID)
View(D1)
D1$delta1_AC_new = ifelse(D1$ID %in% AC_delta1, "AC", "No")
table(D1$delta1_AC_new)
D2 = subset(outcome, ID %in% newdef_delta2$ID)
D2$delta2_AC_new = ifelse(D2$ID %in% AC_delta2, "AC", "No")
table(D2$delta2_AC_new)
D1 = subset(outcome, ID %in% newdef_delta1$ID)
D1$delta1_AC_new = ifelse(D1$ID %in% AC_delta1, "AC", "No")
D2 = subset(outcome, ID %in% newdef_delta2$ID)
D2$delta2_AC_new = ifelse(D2$ID %in% AC_delta2, "AC", "No")
D1_remove1 = subset(D1, ! ID %in% remove_1)
D2_remove1 = subset(D2, ! ID %in% remove_1)
D1_remove2 = subset(D1, ! ID %in% remove_2)
D2_remove2 = subset(D2, ! ID %in% remove_2)
ant_tab = as.data.frame.matrix(table(D1$delta1_AC_new, D1$group2))
pos_tab = as.data.frame.matrix(table(D2$delta2_AC_new, D2$group2))
ant_sens = sens_tab(ant_tab)
pos_sens = sens_tab(pos_tab)
ant_tab
ant_sens
pos_tab
pos_sens
4/7
92/135
4/47
92/95
ant_tab1 = as.data.frame.matrix(table(D1_remove1$delta1_AC_new, D1_remove1$group2))
pos_tab1 = as.data.frame.matrix(table(D2_remove1$delta2_AC_new, D2_remove1$group2))
ant_sens1 = sens_tab(ant_tab1)
pos_sens1 = sens_tab(pos_tab1)
ant_tab2 = as.data.frame.matrix(table(D1_remove2$delta1_AC_new, D1_remove2$group2))
pos_tab2 = as.data.frame.matrix(table(D2_remove2$delta2_AC_new, D2_remove2$group2))
ant_sens2 = sens_tab(ant_tab2)
pos_sens2 = sens_tab(pos_tab2)
ant_tab1
ant_sens1
89/(39+89)
2/41
89/91
tb = cbind(ant_tab,pos_tab,all_tab)
tb1 = cbind(ant_tab1,pos_tab1,all_tab_1)
tb2 = cbind(ant_tab2,pos_tab2,all_tab_2)
tb$thresh = tb1$thresh = tb2$thresh = thresh
table.count = rbind(table.count,tb)
table.count1 = rbind(table.count1,tb1)
table.count2 = rbind(table.count2,tb2)
sens = as.data.frame(cbind(t(ant_sens),t(pos_sens),t(all_sens)))
sens1 = as.data.frame(cbind(t(ant_sens1),t(pos_sens1),t(all_sens_1)))
sens2 = as.data.frame(cbind(t(ant_sens2),t(pos_sens2),t(all_sens_2)))
sens$thresh = sens1$thresh = sens2$thresh = thresh
overall_remove1 = subset(overall, ! ID %in% remove_1)
all_tab_1 = as.data.frame.matrix(table(overall_remove1$AC_new, overall_remove1$group2))
all_sens_1 = sens_tab(all_tab_1)
overall_remove2 = subset(overall, ! ID %in% remove_2)
all_tab_2 = as.data.frame.matrix(table(overall_remove2$AC_new, overall_remove2$group2))
all_sens_2 = sens_tab(all_tab_2)
D1 = subset(outcome, ID %in% newdef_delta1$ID)
D1$delta1_AC_new = ifelse(D1$ID %in% AC_delta1, "AC", "No")
D2 = subset(outcome, ID %in% newdef_delta2$ID)
D2$delta2_AC_new = ifelse(D2$ID %in% AC_delta2, "AC", "No")
D1_remove1 = subset(D1, ! ID %in% remove_1)
D2_remove1 = subset(D2, ! ID %in% remove_1)
D1_remove2 = subset(D1, ! ID %in% remove_2)
D2_remove2 = subset(D2, ! ID %in% remove_2)
ant_tab = as.data.frame.matrix(table(D1$delta1_AC_new, D1$group2))
pos_tab = as.data.frame.matrix(table(D2$delta2_AC_new, D2$group2))
ant_sens = sens_tab(ant_tab)
pos_sens = sens_tab(pos_tab)
ant_tab1 = as.data.frame.matrix(table(D1_remove1$delta1_AC_new, D1_remove1$group2))
pos_tab1 = as.data.frame.matrix(table(D2_remove1$delta2_AC_new, D2_remove1$group2))
ant_sens1 = sens_tab(ant_tab1)
pos_sens1 = sens_tab(pos_tab1)
ant_tab2 = as.data.frame.matrix(table(D1_remove2$delta1_AC_new, D1_remove2$group2))
pos_tab2 = as.data.frame.matrix(table(D2_remove2$delta2_AC_new, D2_remove2$group2))
ant_sens2 = sens_tab(ant_tab2)
pos_sens2 = sens_tab(pos_tab2)
tb = cbind(ant_tab,pos_tab,all_tab)
tb1 = cbind(ant_tab1,pos_tab1,all_tab_1)
tb2 = cbind(ant_tab2,pos_tab2,all_tab_2)
View(tb)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
