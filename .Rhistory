}
varJoint = norm(jointd, type = "F")^2/norm(datad, type = "F")^2
varInd = norm(indd, type = "F")^2/norm(datad, type = "F")^2
varoftot = c(varJoint,varInd)
names(varoftot) = c("Joint","Individual")
VarIndiv = rep(0, k)
for (i in 1:k) {
VarIndiv[i] = norm(result$individual[[i]],
type = "F")^2/norm(indd,
type = "F")^2
}
names(VarIndiv) = labs
pca.joint = prcomp(t(jointd), center = F, scale. = F)
v_topRJpc = (pca.joint$sdev^2 / sum(pca.joint$sdev^2))[1:result$rankJ]
rot_topRJpc = pca.joint$rotation[,1:result$rankJ]
np = unlist(lapply(result$data,nrow))
np.list = split(1:sum(np), rep(1:k,np))
pvebypc = NULL
for(i in 1:result$rankJ){
row.i = NULL
for(l in 1:k){
row.i = c(row.i,sum(rot_topRJpc[np.list[[l]],i]^2))
}
pvebypc =rbind(pvebypc,row.i)
}
pvebypc = t(pvebypc)
pvebypc = rbind(pvebypc,v_topRJpc)
rownames(pvebypc) = c(labs,"VofJoint")
colnames(pvebypc) = c(1:result$rankJ)
ind.pct.list = list()
for(i in 1:k){
ind.i = t(jive.w.pm$individual[[i]])
pca.ind = prcomp(ind.i,center = F, scale. = F)
ind.pct.list[[i]] = (pca.ind$sdev^2 / sum(pca.ind$sdev^2))[1:r[i]]
}
names(ind.pct.list) = labs
ret = list("pve_Tot" = varoftot,"pve_Ind" = VarIndiv,"pve_JointPC" = pvebypc, "pve_IndPC" = ind.pct.list)
return(ret)
}
getJIVEVarExp = function(result){
k = length(result$data)
labs = names(result$data)
jointd = NULL
for(i in 1:k){
jointd = rbind(jointd,result$joint[[i]])
}
datad = NULL
for(i in 1:k){
datad = rbind(datad,result$data[[i]])
}
indd = NULL
for(i in 1:k){
indd = rbind(indd,result$individual[[i]])
}
varJoint = norm(jointd, type = "F")^2/norm(datad, type = "F")^2
varInd = norm(indd, type = "F")^2/norm(datad, type = "F")^2
varoftot = c(varJoint,varInd)
names(varoftot) = c("Joint","Individual")
VarIndiv = rep(0, k)
for (i in 1:k) {
VarIndiv[i] = norm(result$individual[[i]],
type = "F")^2/norm(indd,
type = "F")^2
}
names(VarIndiv) = labs
pca.joint = prcomp(t(jointd), center = F, scale. = F)
v_topRJpc = (pca.joint$sdev^2 / sum(pca.joint$sdev^2))[1:result$rankJ]
rot_topRJpc = pca.joint$rotation[,1:result$rankJ]
np = unlist(lapply(result$data,nrow))
np.list = split(1:sum(np), rep(1:k,np))
pvebypc = NULL
for(i in 1:result$rankJ){
row.i = NULL
for(l in 1:k){
row.i = c(row.i,sum(rot_topRJpc[np.list[[l]],i]^2))
}
pvebypc =rbind(pvebypc,row.i)
}
pvebypc = t(pvebypc)
pvebypc = rbind(pvebypc,v_topRJpc)
rownames(pvebypc) = c(labs,"VofJoint")
colnames(pvebypc) = c(1:result$rankJ)
ind.pct.list = list()
for(i in 1:k){
ind.i = t(jive.w.pm$individual[[i]])
pca.ind = prcomp(ind.i,center = F, scale. = F)
ind.pct.list[[i]] = (pca.ind$sdev^2 / sum(pca.ind$sdev^2))[1:result$rankA[i]]
}
names(ind.pct.list) = labs
ret = list("pve_Tot" = varoftot,"pve_Ind" = VarIndiv,"pve_JointPC" = pvebypc, "pve_IndPC" = ind.pct.list)
return(ret)
}
getJIVEVarExp(jive.w.pm)
W_var_pct = totvar
totvar
totvar = mpca.1$varofTot
totvar
mat = scale(features[,-c(1:2)], scale = T, center = T)
id.list = features$ID
mpca.1 = multilevel_pca(Y = mat, id = id.list, twoway = FALSE,cov.method = "m1",
pve = 0.9, smoothing = FALSE)
pct = lapply(mpca.1$pctvar,sum)
pct
save(mpca.1, jive.x.pm, jive.w.pm,  ids, features, file = "data/analysis/mpca_jive.rda")
rm(list = ls())
load("data/analysis/mpca_jive.rda")
totvar = mpca.1$varofTot
pct = lapply(mpca.1$pctvar,sum)
x_w = unlist(pct) * unlink(totvar)
x_w
unlist(pct)
x_w = unlist(pct) * unlist(totvar)
x_w
w_var_pct = x_w[2]
w_var_pct
getJIVEVarExp = function(result){
k = length(result$data)
labs = names(result$data)
jointd = NULL
for(i in 1:k){
jointd = rbind(jointd,result$joint[[i]])
}
datad = NULL
for(i in 1:k){
datad = rbind(datad,result$data[[i]])
}
indd = NULL
for(i in 1:k){
indd = rbind(indd,result$individual[[i]])
}
varJoint = norm(jointd, type = "F")^2/norm(datad, type = "F")^2
varInd = norm(indd, type = "F")^2/norm(datad, type = "F")^2
varoftot = c(varJoint,varInd)
names(varoftot) = c("Joint","Individual")
VarIndiv = rep(0, k)
for (i in 1:k) {
VarIndiv[i] = norm(result$individual[[i]],
type = "F")^2/norm(indd,
type = "F")^2
}
names(VarIndiv) = labs
pca.joint = prcomp(t(jointd), center = F, scale. = F)
v_topRJpc = (pca.joint$sdev^2 / sum(pca.joint$sdev^2))[1:result$rankJ]
rot_topRJpc = pca.joint$rotation[,1:result$rankJ]
np = unlist(lapply(result$data,nrow))
np.list = split(1:sum(np), rep(1:k,np))
pvebypc = NULL
for(i in 1:result$rankJ){
row.i = NULL
for(l in 1:k){
row.i = c(row.i,sum(rot_topRJpc[np.list[[l]],i]^2))
}
pvebypc =rbind(pvebypc,row.i)
}
pvebypc = t(pvebypc)
pvebypc = rbind(pvebypc,v_topRJpc)
rownames(pvebypc) = c(labs,"VofJoint")
colnames(pvebypc) = c(1:result$rankJ)
ind.pct.list = list()
for(i in 1:k){
ind.i = t(jive.w.pm$individual[[i]])
pca.ind = prcomp(ind.i,center = F, scale. = F)
ind.pct.list[[i]] = (pca.ind$sdev^2 / sum(pca.ind$sdev^2))[1:result$rankA[i]]
}
names(ind.pct.list) = labs
ret = list("pve_Tot" = varoftot,"pve_Ind" = VarIndiv,"pve_JointPC" = pvebypc, "pve_IndPC" = ind.pct.list)
return(ret)
}
w_var_pct
jive_w_var = getJIVEVarExp(jive.w.pm)
jive_w_var
w_var_pct * jive_w_var$pve_Tot[1] * jive_w_var$pve_JointPC[4,]
0.7062175 * 0.4729109 * c(0.5297411,0.3027809,0.16747795)
joint_var
joint_var = w_var_pct * jive_w_var$pve_Tot[1] * jive_w_var$pve_JointPC[4,]
joint_var
pa_var = w_var_pct * jive_w_var$pve_Tot[2] * jive_w_var$pve_Ind[1] * jive_w_var$pve_IndPC$Activity_W
pa_var
joint_var = w_var_pct * jive_w_var$pve_Tot[1] * jive_w_var$pve_JointPC[4,]
pa_var = w_var_pct * jive_w_var$pve_Tot[2] * jive_w_var$pve_Ind[1] * jive_w_var$pve_IndPC$Activity_W
sl_var = w_var_pct * jive_w_var$pve_Tot[2] * jive_w_var$pve_Ind[2] * jive_w_var$pve_IndPC$Sleep_W
cr_var = w_var_pct * jive_w_var$pve_Tot[2] * jive_w_var$pve_Ind[3] * jive_w_var$pve_IndPC$Circadian_W
pct_all = c(joint_var,pa_var,sl_var,cr_var)
jive.w.pm$rankJ
jive.w.pm$rankA
3 + 3 + 4 + 6
save(mpca.1, jive.x.pm, jive.w.pm,  ids, features, pct_all, file = "data/analysis/mpca_jive.rda")
rm(list = ls())
load("data/analysis/mpca_jive.rda")
source("scripts/getJIVEscores.R")
rm(list = ls())
load("data/analysis/mpca_jive.rda")
source("scripts/getJIVEscores.R")
jt = joint_score(jive.w.pm)
View(jt)
ind = ind_scores(jive.w.pm)
View(ind)
pct_all
pct_all * 100
round(pct_all * 100,2)
scores_w = cbind(ids, jt, ind)
View(scores_w)
scores_w$Day = NULL
rm(list = ls())
load("data/analysis/mpca_jive.rda")
source("scripts/getJIVEscores.R")
jt = joint_score(jive.w.pm)
ind = ind_scores(jive.w.pm)
scores_w = cbind(ids, jt, ind)
scores_w$Day = NULL
scores_w = scores_w[order(scores_w$ID,scores_w$weekd),]
ids2 = data.frame(ID = rep(unique(scores_w$ID), each = 7), weekd = rep(c(1:7), 415))
scores_w = merge(x = ids2, y = scores_w, all = T)
View(scores_w)
0.60759350 + 0.29317722 + 0.09922928
0.51363508 +  0.24680665 + 0.14819779 + 0.09136049
pct_all
pct_all2 = round(pct_all * 100,2)
pct_all2
i = 1
score.i = names(scores_w)[i+2]
dat.i = scores_w[,c(1,2,(i+2))]
View(dat.i)
names(dat.i) = c("subj","argvals","y")
dat.i = na.omit(dat.i)
View(dat.i)
newdata = scores_w[,c(1,2,(i+2))]
names(newdata) = c("subj","argvals","y")
facefit.i = face.sparse(data = dat.i, calculate.scores = TRUE,argvals.new = c(1:7),knots = 3, newdata = newdata)
warnings()
View(newdata)
View(dat.i)
facefit.i = face.sparse(data = dat.i, calculate.scores = TRUE,argvals.new = c(1:7),knots = 3)
facefit.i$scores
facefit.i$eigenvalues
facefit.i = face.sparse(data = dat.i, calculate.scores = TRUE,argvals.new = c(1:7),knots = 3,newdata = dat.i)
facefit.i$scores
a = facefit.i$scores
facefit.i = face.sparse(data = dat.i, calculate.scores = TRUE,argvals.new = c(1:7),knots = 3,newdata = newdata)
b= facefit.i$scores
a = a$scores
b$subj
b$u
b = b$scores
View(a)
View(b)
plot(a, b)
cor(a, b)
face_results = list()
for(i in 1:16){
score.i = names(scores_w)[i+2]
dat.i = scores_w[,c(1,2,(i+2))]
names(dat.i) = c("subj","argvals","y")
dat.i = na.omit(dat.i)
newdata = scores_w[,c(1,2,(i+2))]
names(newdata) = c("subj","argvals","y")
facefit.i = face.sparse(data = dat.i, calculate.scores = TRUE,argvals.new = c(1:7),knots = 3,newdata = dat.i)
face_results[[i]] = facefit.i
names(face_results)[i] = score.i
}
save(face_results, file = "data/analysis/imputed_wscores.rda")
func = function(x){ncol(x$eigenfunctions)}
ranks = unlist(lapply(face_results, func))
ranks
sum(ranks)
i = 1
f.i = face_results[[i]]
mu.i = f.i$mu.new
egf.i = f.i$eigenfunctions
score.i = f.i$scores$scores
egf.i
score.i
j = 1
low_tmp <- mu.i + -2*sd(score.i[,j])*egf.i[,j]
high_tmp <-  mu.i + 2*sd(score.i[,j])*egf.i[,j]
ub = max(c(high_tmp,mu.i,low_tmp))
lb = min(c(low_tmp,mu.i,high_tmp))
plot(mu.i,  main=paste0(names(face_results)[[i]],": ", j), type = "l", ylim = c(lb,ub))
f.i$eigenvalues
x = matrix(rnorm(200), ncol = 20, nrow = 10)
x
xx = prcomp(x, center = T, scale. = F)
xx
summary(xx)
xxx  =cov(x)
eigen(xxx)$values
eigen(xxx)$values/sum(eigen(xxx)$values)
round(eigen(xxx)$values/sum(eigen(xxx)$values),4)
?face.sparse
i
j
pct_all[i]
pt = pct_all[i] * pct.i[j]
pct.i[j]
j = 1
pct.i = egf.i/sum(egf.i)
pt = pct_all[i] * pct.i[j]
pt
pct.i[j]
pct.i = f.i$eigenvalues/sum(f.i$eigenvalues)
pct.i[j]
pct_all[i] * pct.i[j]
i = 1
f.i = face_results[[i]]
mu.i = f.i$mu.new
egf.i = f.i$eigenfunctions
pct.i = f.i$eigenvalues/sum(f.i$eigenvalues)
score.i = f.i$scores$scores
j = 1
low_tmp <- mu.i + -2*sd(score.i[,j])*egf.i[,j]
high_tmp <-  mu.i + 2*sd(score.i[,j])*egf.i[,j]
ub = max(c(high_tmp,mu.i,low_tmp))
lb = min(c(low_tmp,mu.i,high_tmp))
pt = pct_all[i] * pct.i[j]
plot(mu.i,  main=paste0(names(face_results)[[i]],": ", j, " ", round(pt*100,2)), type = "l", ylim = c(lb,ub))
lines(high_tmp, col = "red", pch = "+", type = "b")
lines(low_tmp, col = "blue", pch = "-", type = "b")
png("results/w_week_pattern_by_sfpca.pngm",width = 25,height = 18,units = "in",res = 300)
par(mfrow = c(6,6))
for(i in 1:16){
f.i = face_results[[i]]
mu.i = f.i$mu.new
egf.i = f.i$eigenfunctions
pct.i = f.i$eigenvalues/sum(f.i$eigenvalues)
score.i = f.i$scores$scores
for(j in 1:ncol(egf.i)){
low_tmp <- mu.i + -2*sd(score.i[,j])*egf.i[,j]
high_tmp <-  mu.i + 2*sd(score.i[,j])*egf.i[,j]
ub = max(c(high_tmp,mu.i,low_tmp))
lb = min(c(low_tmp,mu.i,high_tmp))
pt = pct_all[i] * pct.i[j]
plot(mu.i,  main=paste0(names(face_results)[[i]],": ", j, " ", round(pt*100,2)), type = "l", ylim = c(lb,ub))
lines(high_tmp, col = "red", pch = "+", type = "b")
lines(low_tmp, col = "blue", pch = "-", type = "b")
}
}
dev.off()
png("results/w_week_pattern_by_sfpca.png",width = 25,height = 18,units = "in",res = 300)
par(mfrow = c(6,6))
for(i in 1:16){
f.i = face_results[[i]]
mu.i = f.i$mu.new
egf.i = f.i$eigenfunctions
pct.i = f.i$eigenvalues/sum(f.i$eigenvalues)
score.i = f.i$scores$scores
for(j in 1:ncol(egf.i)){
low_tmp <- mu.i + -2*sd(score.i[,j])*egf.i[,j]
high_tmp <-  mu.i + 2*sd(score.i[,j])*egf.i[,j]
ub = max(c(high_tmp,mu.i,low_tmp))
lb = min(c(low_tmp,mu.i,high_tmp))
pt = pct_all[i] * pct.i[j]
plot(mu.i,  main=paste0(names(face_results)[[i]],": ", j, " ", round(pt*100,2)), type = "l", ylim = c(lb,ub))
lines(high_tmp, col = "red", pch = "+", type = "b")
lines(low_tmp, col = "blue", pch = "-", type = "b")
}
}
dev.off()
rm(list = ls())
library(haven)
"~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta"
cancer = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
View(cancer)
View(cancer)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
names(file1)
table(file1$dxcount)
file1 = subset(file1, select = c(ID, Age, bmi, depress, srhealth, cancer,hypertension))
View(file1)
load("~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcome.rda")
View(out)
names(out)
rm(list = ls())
setwd("~/Dropbox/Junrui Di/multilevel jive/data/outcomes/")
library(haven)
cesd = read_sas("cesd.sas7bdat")
cesd$ID = paste0(cesd$Idno,"-",cesd$Visit)
cesd = cesd[,c(5:8)]
cvl = read_sas("cvl.sas7bdat")
cvl$ID = paste0(cvl$Idno,"-",cvl$Visit)
cvl = cvl[,c(5:8)]
dsst = read_sas("digitsym.sas7bdat")
dsst$ID = paste0(dsst$Idno,"-",dsst$Visit)
dsst = dsst[,c(5:6)]
pfunc = read_sas("mastervisit.sas7bdat")
pfunc$ID = paste0(pfunc$IDNo,"-",pfunc$Visit)
pfunc = pfunc[,c(12:114)]
pfunc$GripDate = NULL
pfunc.list = as.list(pfunc)
lbl = NULL
for(i in 1:101){
lbl = rbind(lbl, attr(pfunc.list[[i]], "label"))
}
lbl = cbind(lbl, names(pfunc.list)[1:101])
View(lbl)
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
file1 = subset(file1, select = c(ID, Age, bmi, depress, srhealth, cancer,hypertension))
load("~/Dropbox/Junrui Di/multilevel jive/data/outcomes/ ")
load("~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcome.rda")
grepl(pattern = "ADL",names(outcome))
grepl(pattern = "ADL",names(out))
file2 = out[,c(1,which(grepl(pattern = "ADL",names(out))))]
View(file2)
load("~/Dropbox/Junrui Di/multilevel jive/data/analysis/mpca_jive.rda")
uid = unique(ids)
uid = unique(ids$ID)
file1 = subset(file1, ID %in% uid)
View(file1)
file2 = subset(file2, ID %in% uid)
View(file2)
outcome = merge(x = file1, y = file2, all = T)
View(outcome)
xx = na.omit(outcome)
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
file1 = subset(file1, select = c(ID, Age, bmi, depress, srhealth, cancer,hypertension))
load("~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcome.rda")
file2 = out[,c(1,which(grepl(pattern = "ADL",names(out))))]
load("~/Dropbox/Junrui Di/multilevel jive/data/analysis/mpca_jive.rda")
uid = unique(ids$ID)
file1 = subset(file1, ID %in% uid)
file2 = subset(file2, ID %in% uid)
View(file1)
View(file2)
out = merge(x = file1, y = file2, all = T)
View(out)
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
file1 = subset(file1, select = c(ID, Age, bmi, UGSpeed, depress, srhealth, cancer,hypertension))
load("~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcome.rda")
file2 = out[,c(1,which(grepl(pattern = "ADL",names(out))))]
load("~/Dropbox/Junrui Di/multilevel jive/data/analysis/mpca_jive.rda")
uid = unique(ids$ID)
file1 = subset(file1, ID %in% uid)
file2 = subset(file2, ID %in% uid)
out = merge(x = file1, y = file2, all = T)
View(out)
save(out, file = "~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcomes2.rdax")
save(out, file = "~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcomes2.rda")
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
names(file1)
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
file1 = subset(file1, select = c(ID, Age, bmi, UGSpeed, depress, srhealth, cancer,hypertension,scvd,cholesterol,
sstroke, scopd, ,diabetes,skidneydisease,falls, hosp))
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
file1 = subset(file1, select = c(ID, Age, bmi, UGSpeed, depress, srhealth, cancer,hypertension,scvd,cholesterol,
sstroke, scopd, diabetes,skidneydisease,falls, hosp))
View(file1)
apply(file1[,-c(1:4)],2,table)
rm(list = ls())
library(haven)
file1 = read_dta("~/Dropbox/BLSA Mortality/data/raw/BLSA_covariates.dta")
file1$ID = paste(file1$idno,file1$visit,sep = "-")
file1 = subset(file1, select = c(ID, Age, bmi, UGSpeed, depress, srhealth, cancer,hypertension,scvd,cholesterol,
sstroke, scopd, diabetes,skidneydisease))
# load("~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcome.rda")
# file2 = out[,c(1,which(grepl(pattern = "ADL",names(out))))]
load("~/Dropbox/Junrui Di/multilevel jive/data/analysis/mpca_jive.rda")
uid = unique(ids$ID)
out = subset(file1, ID %in% uid)
# file2 = subset(file2, ID %in% uid)
# out = merge(x = file1, y = file2, all = T)
View(out)
# out = merge(x = file1, y = file2, all = T)
save(out, file = "~/Dropbox/Junrui Di/multilevel jive/data/outcomes/outcomes2.rda")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
