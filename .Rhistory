v = rho^h
return(v)
}
n = 100
mu = 30
delta = 10
r = 1
day = 1
rho = 0.6
btc = 0.4
sd_wi = 10
sd_bt = 15
xi = 0.3
bt_cov = matrix(c(sd_bt^2, xi * sd_bt^2, xi * sd_bt^2, sd_bt^2),
ncol = 2, nrow = 2, byrow = T)
bt_cov
mean_effect = mvrnorm(n = n, mu = c(mu, mu + delta), Sigma = bt_cov)
wi_cov = diag(1, ncol = 2, nrow = 2) %x% (ar1_gen(p = day, rho = btc) %x% (sd_wi^2 * ar1_gen(p = r, rho = rho)))
wi_cov
i = 1
dat.i = mvrnorm(n = 1, mu = c(rep(mean_effect[i,1], day * r),rep(mean_effect[i,2], day * r)), Sigma = wi_cov)
dat.i
simu_data = function(
n, # sample size
mu, # pre treatment basedline mean
delta, # effect (post - pre)
r = 1, # number of daily measurement
day = 1, # number o days
rho = 0.6, # within day correlation
btc = 0.4, # between day correlation
sd_wi, # within subjects measurement error
sd_bt, # between subject effects
xi = 0.3
){
bt_cov = matrix(c(sd_bt^2, xi * sd_bt^2, xi * sd_bt^2, sd_bt^2),
ncol = 2, nrow = 2, byrow = T)
mean_effect = mvrnorm(n = n, mu = c(mu, mu + delta), Sigma = bt_cov)
wi_cov = diag(1, ncol = 2, nrow = 2) %x% (ar1_gen(p = day, rho = btc) %x% (sd_wi^2 * ar1_gen(p = r, rho = rho)))
simu.dat = data.frame()
for(i in 1:n){
dat.i = mvrnorm(n = 1, mu = c(rep(mean_effect[i,1], day * r),rep(mean_effect[i,2], day * r)), Sigma = wi_cov)
simu.dat = rbind(simu.dat, dat.i)
}
pre = simu.dat[,1:35]
post = simu.dat[,36:70]
mean.pre = rowMeans(pre)
mean.post = rowMeans(post)
diff = mean.post - mean.pre
diff
}
rm(list = ls())
library(MASS)
# 1. scripts to use -------------------------------------------------------
ar1_gen = function(p, rho){
h = abs(outer(c(1:p),c(1:p),"-"))
v = rho^h
return(v)
}
simu_data = function(
n, # sample size
mu, # pre treatment basedline mean
delta, # effect (post - pre)
r = 1, # number of daily measurement
day = 1, # number o days
rho = 0.6, # within day correlation
btc = 0.4, # between day correlation
sd_wi, # within subjects measurement error
sd_bt, # between subject effects
xi = 0.3
){
bt_cov = matrix(c(sd_bt^2, xi * sd_bt^2, xi * sd_bt^2, sd_bt^2),
ncol = 2, nrow = 2, byrow = T)
mean_effect = mvrnorm(n = n, mu = c(mu, mu + delta), Sigma = bt_cov)
wi_cov = diag(1, ncol = 2, nrow = 2) %x% (ar1_gen(p = day, rho = btc) %x% (sd_wi^2 * ar1_gen(p = r, rho = rho)))
simu.dat = data.frame()
for(i in 1:n){
dat.i = mvrnorm(n = 1, mu = c(rep(mean_effect[i,1], day * r),rep(mean_effect[i,2], day * r)), Sigma = wi_cov)
simu.dat = rbind(simu.dat, dat.i)
}
pre = simu.dat[,1:35]
post = simu.dat[,36:70]
mean.pre = rowMeans(pre)
mean.post = rowMeans(post)
diff = mean.post - mean.pre
diff
}
# 2. parameter setup ------------------------------------------------------
mean_base = 30
sd_between = 15
delta_control = 10
pct = 0.2
delta_case = delta_control * (1-0.2)
sd_wi = 10
n = 50
simu_case = simu_data(n = n, mu = mean_base, delta = delta_case,
sd_wi = sd_wi, sd_bt = sd_between)
simu_control = simu_data(n = n, mu = mean_base, delta = delta_control,
sd_wi = sd_wi, sd_bt = sd_between)
simu.dat = data.frame()
for(i in 1:n){
dat.i = mvrnorm(n = 1, mu = c(rep(mean_effect[i,1], day * r),rep(mean_effect[i,2], day * r)), Sigma = wi_cov)
simu.dat = rbind(simu.dat, dat.i)
}
rm(list = ls())
library(MASS)
# 1. scripts to use -------------------------------------------------------
ar1_gen = function(p, rho){
h = abs(outer(c(1:p),c(1:p),"-"))
v = rho^h
return(v)
}
simu_data = function(
n, # sample size
mu, # pre treatment basedline mean
delta, # effect (post - pre)
r = 1, # number of daily measurement
day = 1, # number o days
rho = 0.6, # within day correlation
btc = 0.4, # between day correlation
sd_wi, # within subjects measurement error
sd_bt, # between subject effects
xi = 0.3
){
bt_cov = matrix(c(sd_bt^2, xi * sd_bt^2, xi * sd_bt^2, sd_bt^2),
ncol = 2, nrow = 2, byrow = T)
mean_effect = mvrnorm(n = n, mu = c(mu, mu + delta), Sigma = bt_cov)
wi_cov = diag(1, ncol = 2, nrow = 2) %x% (ar1_gen(p = day, rho = btc) %x% (sd_wi^2 * ar1_gen(p = r, rho = rho)))
simu.dat = data.frame()
for(i in 1:n){
dat.i = mvrnorm(n = 1, mu = c(rep(mean_effect[i,1], day * r),rep(mean_effect[i,2], day * r)), Sigma = wi_cov)
simu.dat = rbind(simu.dat, dat.i)
}
pre = simu.dat[,1]
post = simu.dat[,2]
mean.pre = mean(pre)
mean.post = mean(post)
diff = mean.post - mean.pre
diff
}
# 2. parameter setup ------------------------------------------------------
mean_base = 30
sd_between = 15
delta_control = 10
pct = 0.2
delta_case = delta_control * (1-0.2)
sd_wi = 10
n = 50
simu_case = simu_data(n = n, mu = mean_base, delta = delta_case,
sd_wi = sd_wi, sd_bt = sd_between)
simu_control = simu_data(n = n, mu = mean_base, delta = delta_control,
sd_wi = sd_wi, sd_bt = sd_between)
simu_case
simu_control
rm(list = ls())
library(MASS)
# 1. scripts to use -------------------------------------------------------
ar1_gen = function(p, rho){
h = abs(outer(c(1:p),c(1:p),"-"))
v = rho^h
return(v)
}
simu_data = function(
n, # sample size
mu, # pre treatment basedline mean
delta, # effect (post - pre)
r = 1, # number of daily measurement
day = 1, # number o days
rho = 0.6, # within day correlation
btc = 0.4, # between day correlation
sd_wi, # within subjects measurement error
sd_bt, # between subject effects
xi = 0.3
){
bt_cov = matrix(c(sd_bt^2, xi * sd_bt^2, xi * sd_bt^2, sd_bt^2),
ncol = 2, nrow = 2, byrow = T)
mean_effect = mvrnorm(n = n, mu = c(mu, mu + delta), Sigma = bt_cov)
wi_cov = diag(1, ncol = 2, nrow = 2) %x% (ar1_gen(p = day, rho = btc) %x% (sd_wi^2 * ar1_gen(p = r, rho = rho)))
simu.dat = data.frame()
for(i in 1:n){
dat.i = mvrnorm(n = 1, mu = c(rep(mean_effect[i,1], day * r),rep(mean_effect[i,2], day * r)), Sigma = wi_cov)
simu.dat = rbind(simu.dat, dat.i)
}
pre = simu.dat[,1]
post = simu.dat[,2]
diff = post - pre
diff
}
# 2. parameter setup ------------------------------------------------------
mean_base = 30
sd_between = 15
delta_control = 10
pct = 0.2
delta_case = delta_control * (1-0.2)
sd_wi = 10
n = 50
simu_case = simu_data(n = n, mu = mean_base, delta = delta_case,
sd_wi = sd_wi, sd_bt = sd_between)
simu_control = simu_data(n = n, mu = mean_base, delta = delta_control,
sd_wi = sd_wi, sd_bt = sd_between)
t.test(x = simu_case, y = simu_control)$p.value
rm(list = ls())
library(MASS)
# 1. scripts to use -------------------------------------------------------
ar1_gen = function(p, rho){
h = abs(outer(c(1:p),c(1:p),"-"))
v = rho^h
return(v)
}
simu_data = function(
n, # sample size
mu, # pre treatment basedline mean
delta, # effect (post - pre)
r = 1, # number of daily measurement
day = 1, # number o days
rho = 0.6, # within day correlation
btc = 0.4, # between day correlation
sd_wi, # within subjects measurement error
sd_bt, # between subject effects
xi = 0.3
){
bt_cov = matrix(c(sd_bt^2, xi * sd_bt^2, xi * sd_bt^2, sd_bt^2),
ncol = 2, nrow = 2, byrow = T)
mean_effect = mvrnorm(n = n, mu = c(mu, mu + delta), Sigma = bt_cov)
wi_cov = diag(1, ncol = 2, nrow = 2) %x% (ar1_gen(p = day, rho = btc) %x% (sd_wi^2 * ar1_gen(p = r, rho = rho)))
simu.dat = data.frame()
for(i in 1:n){
dat.i = mvrnorm(n = 1, mu = c(rep(mean_effect[i,1], day * r),rep(mean_effect[i,2], day * r)), Sigma = wi_cov)
simu.dat = rbind(simu.dat, dat.i)
}
pre = simu.dat[,1]
post = simu.dat[,2]
diff = post - pre
diff
}
# 2. parameter setup ------------------------------------------------------
mean_base = 30
sd_between = 15
delta_control = 10
pct = 0.2
delta_case = delta_control * (1-0.2)
sd_wi = 10
# 3. Simulation -----------------------------------------------------------
nseq = seq(from =50, to = 500, by = 50)
power.vec = NULL
t1 = Sys.time()
for(n in nseq){
print(n)
plist = NULL
for(iter in c(1:1000)){
print(iter)
simu_case = simu_data(n = n, mu = mean_base, delta = delta_case,
sd_wi = sd_wi, sd_bt = sd_between)
simu_control = simu_data(n = n, mu = mean_base, delta = delta_control,
sd_wi = sd_wi, sd_bt = sd_between)
plist = c(plist,t.test(x = simu_case, y = simu_control)$p.value)
}
power.vec = c(power.vec,sum(plist < 0.05)/1000)
}
power.vec
nseq = seq(from =550, to = 1000, by = 50)
power.vec = NULL
t1 = Sys.time()
for(n in nseq){
print(n)
plist = NULL
for(iter in c(1:1000)){
print(iter)
simu_case = simu_data(n = n, mu = mean_base, delta = delta_case,
sd_wi = sd_wi, sd_bt = sd_between)
simu_control = simu_data(n = n, mu = mean_base, delta = delta_control,
sd_wi = sd_wi, sd_bt = sd_between)
plist = c(plist,t.test(x = simu_case, y = simu_control)$p.value)
}
power.vec = c(power.vec,sum(plist < 0.05)/1000)
}
power.vec
nseq = seq(from =1050, to = 1500, by = 50)
power.vec = NULL
t1 = Sys.time()
for(n in nseq){
print(n)
plist = NULL
for(iter in c(1:1000)){
print(iter)
simu_case = simu_data(n = n, mu = mean_base, delta = delta_case,
sd_wi = sd_wi, sd_bt = sd_between)
simu_control = simu_data(n = n, mu = mean_base, delta = delta_control,
sd_wi = sd_wi, sd_bt = sd_between)
plist = c(plist,t.test(x = simu_case, y = simu_control)$p.value)
}
power.vec = c(power.vec,sum(plist < 0.05)/1000)
}
power.vec
nseq = seq(from =1550, to = 2000, by = 50)
power.vec = NULL
t1 = Sys.time()
for(n in nseq){
print(n)
plist = NULL
for(iter in c(1:1000)){
print(iter)
simu_case = simu_data(n = n, mu = mean_base, delta = delta_case,
sd_wi = sd_wi, sd_bt = sd_between)
simu_control = simu_data(n = n, mu = mean_base, delta = delta_control,
sd_wi = sd_wi, sd_bt = sd_between)
plist = c(plist,t.test(x = simu_case, y = simu_control)$p.value)
}
power.vec = c(power.vec,sum(plist < 0.05)/1000)
}
power.vec
nseq
rm(list = ls())
library(nlme)
library(MASS)
# 1. scripts to use -------------------------------------------------------
ar1_gen = function(p, rho){
h = abs(outer(c(1:p),c(1:p),"-"))
v = rho^h
return(v)
}
gls_beta = function(x){
t = c(1:length(x))
mod = gls(x~t, correlation = corAR1(0.5))
mod$coefficients[2]
}
simulate_traditional = function(
mean_alpha, # mean of the intercept
sd_alpha, # sd of the intercept, betweem subject variation
mean_beta, # mean of the slope
sd_beta, # sd of the slope,
sd_within, # within subject variation
n,
month = 12,
rho = 0.3 # between month correlation
){
t = c(1:month)
p = month
alpha_s = rnorm(n = n, mean = mean_alpha, sd = sd_alpha)
beta_s = rnorm(n = n, mean = mean_beta, sd = sd_beta)
cov.mat = sd_within^2 * ar1_gen(p = p, rho =  rho)
eps = mvrnorm(n = n, mu = rep(0,p), Sigma = cov.mat)
simu = data.frame()
for(i in 1:n){
y_ij = alpha_s[i] + beta_s[i] * t + c(t(eps[i,]))
simu = rbind(simu, y_ij)
}
simu = as.data.frame(simu)
names(simu) = paste0("M",t)
simu
}
# 2. Parameter set up -----------------------------------------------------
mean_alpha = 36
sd_alpha = 18
sd_within = 10
pct = 0.2
cv = 0.5
mean_beta_control = 1.5
sd_beta_control = cv * mean_beta_control
mean_beta_case = mean_beta_control * (1 - pct)
sd_beta_case = cv * mean_beta_case
n = 50
for(iter in c(1:1000)){
# print(iter)
simu_case = simulate_traditional(mean_alpha = mean_alpha, sd_alpha = sd_alpha, mean_beta = mean_beta_case, sd_within = sd_within,
sd_beta = sd_beta_case, n = n)
simu_control = simulate_traditional(mean_alpha = mean_alpha, sd_alpha = sd_alpha, mean_beta = mean_beta_control, sd_within = sd_within,
sd_beta = sd_beta_control, n = n)
beta_case = apply(simu_case, 1, gls_beta)
beta_control = apply(simu_control, 1, gls_beta)
plist = c(plist,t.test(x = beta_case, y = beta_control)$p.value)
}
plist = NULL
for(iter in c(1:1000)){
# print(iter)
simu_case = simulate_traditional(mean_alpha = mean_alpha, sd_alpha = sd_alpha, mean_beta = mean_beta_case, sd_within = sd_within,
sd_beta = sd_beta_case, n = n)
simu_control = simulate_traditional(mean_alpha = mean_alpha, sd_alpha = sd_alpha, mean_beta = mean_beta_control, sd_within = sd_within,
sd_beta = sd_beta_control, n = n)
beta_case = apply(simu_case, 1, gls_beta)
beta_control = apply(simu_control, 1, gls_beta)
plist = c(plist,t.test(x = beta_case, y = beta_control)$p.value)
}
n
plist = NULL
for(iter in c(1:1000)){
print(iter)
simu_case = simulate_traditional(mean_alpha = mean_alpha, sd_alpha = sd_alpha, mean_beta = mean_beta_case, sd_within = sd_within,
sd_beta = sd_beta_case, n = n)
simu_control = simulate_traditional(mean_alpha = mean_alpha, sd_alpha = sd_alpha, mean_beta = mean_beta_control, sd_within = sd_within,
sd_beta = sd_beta_control, n = n)
beta_case = apply(simu_case, 1, gls_beta)
beta_control = apply(simu_control, 1, gls_beta)
plist = c(plist,t.test(x = beta_case, y = beta_control)$p.value)
}
plist
sum(plist < 0.05)/1000
2*1.2
2*1.4
2*1.6
install.packages(c("pkgconfig", "processx", "rlang"))
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
install.packages(c("later", "tinytex"))
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
