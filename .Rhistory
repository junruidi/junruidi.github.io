triple = cbind(triple,x)
}
triple = as.data.frame(triple)
names(triple) = paste0("triplet_",c("mu","lambda","aveh","gini","a"))
for(i in 1:5){
triple[,i] = as.factor(triple[,i])
triple[,i] = relevel(triple[,i],ref = "low_low_low")
}
doub = NULL
for(i in c(1,3,5,7,9)){
if(i %in% c(1,3,5,7)){
x = paste0(newdata[,i],"_",newdata[,i+1])}
if(i == 9){
x = paste0(newdata[,i+1],"_",newdata[,i])
}
doub = cbind(doub,x)
}
doub = as.data.frame(doub)
names(doub) = paste0("duplet_",c("mu","lambda","aveh","gini","a"))
for(i in 1:5){
doub[,i] = as.factor(doub[,i])
doub[,i] = relevel(doub[,i],ref = "low_low")
}
dummy.double = as.data.frame(model.matrix(~duplet_mu + duplet_lambda + duplet_aveh + duplet_gini + duplet_a, data = doub)[,-1])
interaction4_dummy_double = NULL
for(i in 1:15){
x = dummy.double[,i] * q_surv$Q4_Ps
interaction4_dummy_double = cbind(interaction4_dummy_double,x)
}
interaction4_dummy_double = data.frame(interaction4_dummy_double)
names(interaction4_dummy_double) = paste("Q4PS",names(dummy.double)[1:15],sep = "_")
newdata2 = newdata
for(i in 1:10){
newdata[,i] = factor(newdata[,i],levels = c("low","high"))
newdata2[,i] = paste(newdata2[,11],newdata2[,i],sep = "_")
newdata2[,i] = factor(newdata2[,i],levels = c("low_low","low_high","high_low","high_high"))
}
newdata2 = newdata2[,-11]
names(newdata2) = paste0("InteractBps_",names(newdata2))
newdata = cbind(newdata,newdata2)
dummy.newdata = as.data.frame(model.matrix(~ B_mu.r+B_mu.a+B_lambda.r+B_lambda.a+B_avehr+B_aveha+B_gini.r+B_gini.a+B_aact+B_arest, data = newdata)[,-1])
interaction4_dummy = NULL
for(i in 1:10){
x = dummy.newdata[,i] * q_surv$Q4_Ps
interaction4_dummy = cbind(interaction4_dummy,x)
}
interaction4_dummy = data.frame(interaction4_dummy)
names(interaction4_dummy) = paste("Q4PS",names(dummy.newdata)[1:10],sep = "_")
q_surv = cbind(q_surv,interaction4)
q_surv = cbind(q_surv,interaction3)
q_surv = cbind(q_surv,interaction_square4)
q_surv = cbind(q_surv,newdata)
q_surv = cbind(q_surv,dummy.newdata)
q_surv = cbind(q_surv,interaction4_dummy)
q_surv = cbind(q_surv,triple)
q_surv = cbind(q_surv,doub,interaction4_dummy_double,interaction_BPS)
library(nhanesaccel)
survv = q_surv
survv$survyr = survv$permth_exm/12
include.column = which(names(survv)=="include")
c1 = subset(survv,yr==34)
d1 = subset(survv,yr==56)
c2 = nhanes.accel.reweight(acceldata = c1, wave = 1, seqn.column = 1,
include.column = include.column)
d2 = nhanes.accel.reweight(acceldata = d1, wave = 2, seqn.column = 1,
include.column = include.column)
survv$wt4yr = c(c2$wtmec2yr_adj/2,d2$wtmec2yr_adj/2)
normalize=function(v){return(v/sum(v))}
survv$wt4yr_norm= normalize(survv$wt4yr)*nrow(survv)
svydata = svydesign(id=~SDMVPSU,
strat=~SDMVSTRA,
weight=~wt4yr_norm,
nest=TRUE,
data=survv)
save(svydata, file = "~/Dropbox/Junrui Di/fragmentation/Review AJE/aggregate3/data/survival_1020.rda")
T4 = subset(q_surv, Q_aveps == "Q4")
survv = T4
survv$survyr = survv$permth_exm/12
include.column = which(names(survv)=="include")
c1 = subset(survv,yr==34)
d1 = subset(survv,yr==56)
c2 = nhanes.accel.reweight(acceldata = c1, wave = 1, seqn.column = 1,
include.column = include.column)
d2 = nhanes.accel.reweight(acceldata = d1, wave = 2, seqn.column = 1,
include.column = include.column)
survv$wt4yr = c(c2$wtmec2yr_adj/2,d2$wtmec2yr_adj/2)
normalize=function(v){return(v/sum(v))}
survv$wt4yr_norm= normalize(survv$wt4yr)*nrow(survv)
svydata_T4 = svydesign(id=~SDMVPSU,
strat=~SDMVSTRA,
weight=~wt4yr_norm,
nest=TRUE,
data=survv)
save(svydata, file = "~/Dropbox/Junrui Di/fragmentation/Review AJE/aggregate3/data/survival_1020_T4.rda")
install.packages(c("data.table", "glue", "lazyeval", "lubridate"))
x = cars[,1:3]
x = cars[,c(1:3)]
head(cars)
head(mtcars)
x = mtcars[,c(1,3,4,5,6)]
M = cov(x)
View(M)
evd = eigen(M)
E = evd$vectors
View(E)
t(E)%*%E
E%*%t(E)
Ep = E[,c(1:3)]
t(Ep) %*% Ep
Ep %*% t(Ep)
diag(evd$values)
diag(evd$values[1:3])
dim(Ep)
W = Ep %*% diag(evd$values[1:3]) %*% t(Ep)
W = Ep %*% diag(1/sqrt(evd$values[1:3])) %*% t(Ep)
dim(W)
dim(M)
t(W) %*% M %*% W
library(mice)
?mice.impute.mean
?mice
imp <- mice(nhanes)
imp
imp <- mice(nhanes)
str(imp)
t(W) %*% M %*% W
x = mtcars[,c(1,3,4,5,6)]
M = cov(x)
evd = eigen(M)
E = evd$vectors
Ep = E[,c(1:3)]
t(Ep) %*% Ep
Ep %*% t(Ep)
W2 = Ep %*% diag(1/sqrt(evd$values[1:3])) %*% t(Ep)
W1 = E %*% diag(1/sqrt(evd$values)) %*% t(E)
t(W2) %*% M %*% W2
t(W1) %*% M %*% W1
M1 = t(W1) %*% M %*% W1
M1
eigen(M1)
evdM1 = eigen(M1)
x = mtcars[,c(1,3,4,5,6)]
M = cov(x)
evd = eigen(M)
E = evd$vectors
W = E %*% diag(1/sqrt(evd$values)) %*% t(E)
Xp = X %*% W
x = mtcars[,c(1,3,4,5,6)]
M = cov(x)
evd = eigen(M)
E = evd$vectors
W = E %*% diag(1/sqrt(evd$values)) %*% t(E)
Xp = x %*% W
x = mtcars[,c(1,3,4,5,6)]
M = cov(x)
evd = eigen(M)
E = evd$vectors
W = E %*% diag(1/sqrt(evd$values)) %*% t(E)
Xp = as.matrix(x) %*% W
View(x)
View(Xp)
pca1 = prcomp(x,center = T,scale. = F)
pca2 = prcomp(Xp, center = T, scale. = F)
pca1$x
pca2$x
pca2$rotation
pca1$rotation
cov(Xp)
eigen(cov(Xp))
eigen(cov(x))
pca1$rotation
pca1$sdev^2
eigen(diag(1,1,1,1,1))
diag(rep(1,5))
eigen(diag(rep(1,5)))
cov(Xp)
eigen(cov(Xp))
xp = x %*% E %*% diag(1/sqrt(evd$values))
xp = as.matrix(x) %*% E %*% diag(1/sqrt(evd$values))
View(xp)
View(x)
cov(xp)
sc = prcomp(x, center = T,scale. = F)
sc = sc$x
View(sc)
head(xp)
pc1 = prcomp(x, center = T,scale. = F)
xpp = pc1$x %*% diag(1/pc1$sdev)
head(xpp)
head(as.matrix(x) %*% pc1$rotation %*% diag(1/sqrt(evd$values)))
evd$values
sqrt(evd$values)
pc1$sdev
rm(list = ls())
x = mtcars[,c(1,3,4,5,6)]
rm(list = ls())
x = as.matrix(mtcars[,c(1,3,4,5,6)])
pc1 = prcomp(x,center = T,scale. = F)
SD = pc1$sdev
SD
matSD = diag(1/SD)
matSD
E = pc1$rotation
E
dim(x)
t(E) %*% E\
t(E) %*% E
xp1 = x %*% E %*% matSD
head(xp1)
sc = pc1$x
xp2 = sc %*% matSD
head(xp2)
head(sc)
x %*% E
79.619016 *2
eigen(cov(x))
pc1$rotation
cov(sc)
cov(xp2)
cov(xp1)
rm(list = ls())
x = as.matrix(mtcars[,c(1,3,4,5,6)])
x = scale(x,center = T,scale = F)
pc1 = prcomp(x,center = F,scale. = F)
SD = pc1$sdev
sc = pc1$x
matSD = diag(1/SD)
E = pc1$rotation
xp1 = x %*% E %*% matSD
xp2 = sc %*% matSD
head(xp1)
head(xp2)
install.packages("partitions")
install.packages("apl")
install.packages("apl", repos="http://R-Forge.R-project.org"
)
library(ap;)
library(apl)
source("~/Desktop/apl.R")
require("partitions")
source("~/Desktop/apl.R")
install.packages("apl",repos = "http://r-forge.r-project.org/")
?cumulant
rm(list = ls())
x = data.frame(a = rnorm(50,10),rnorm(50,15),rnorm(50,18))
x = as.matrix(data.frame(a = rnorm(50,10),rnorm(50,15),rnorm(50,18)))
colMeans(x)
x = as.matrix(data.frame(a = rnorm(50,10),b = rnorm(50,15),c = rnorm(50,18)))
colMeans(x)
source("~/Dropbox/Junrui Di/tensor analysis/multi-cumulant/script/cumulant/cumu.R")
rm(list = ls())
x = as.matrix(data.frame(a = rnorm(50,10),b = rnorm(50,15),c = rnorm(50,18)))
source("~/Dropbox/Junrui Di/tensor analysis/multi-cumulant/script/cumulant/cumu.R")
rm(list = ls())
x = as.matrix(data.frame(a = rnorm(50,10),b = rnorm(50,15),c = rnorm(50,18)))
source("~/Dropbox/Junrui Di/tensor analysis/multi-cumulant/script/cumulant/cumu.R")
cum = four_cumulants_direct(x)
cum$c1
colMeans(x)
cum$c2
cov(x)
rm(list = ls())
n = 50
x = as.matrix(data.frame(a = rnorm(n,50,10),b = rnorm(n,50,15),c = rnorm(n,50,18)))
source("~/Dropbox/Junrui Di/tensor analysis/multi-cumulant/script/cumulant/cumu.R")
cum = four_cumulants_direct(x)
cum$c1
colMeans(x)
cum$c2
cov(c2)
cov(x)
rm(list = ls())
n = 10000
x = as.matrix(data.frame(a = rnorm(n,50,10),b = rnorm(n,50,15),c = rnorm(n,50,18)))
source("~/Dropbox/Junrui Di/tensor analysis/multi-cumulant/script/cumulant/cumu.R")
cum = four_cumulants_direct(x)
cum$c2
cov(c2)
cov(x2)
cov(x)
x = scale(x,center = T,scale = F)
colMeans(x)
cum = four_cumulants_direct(x)
cum$c1
cov(x)
cum$c2
Y.list = split(x, seq(nrow(x)))
y0 = rep(0,48)
#3rd order cumulant from pc scores
K3_s2= y0 %o% y0 %o% y0
for( i in 1:length(Y.list)){
K3_s2 = K3_s2+ Y.list[[i]] %o% Y.list[[i]] %o% Y.list[[i]]
}
rm(list = ls())
n = 10000
x = as.matrix(data.frame(a = rnorm(n,50,10),b = rnorm(n,50,15),c = rnorm(n,50,18)))
x = scale(x,center = T,scale = F)
source("~/Dropbox/Junrui Di/tensor analysis/multi-cumulant/script/cumulant/cumu.R")
Y.list = split(x, seq(nrow(x)))
rm(list = ls())
n = 1000
x = as.matrix(data.frame(a = rnorm(n,50,10),b = rnorm(n,50,15),c = rnorm(n,50,18)))
x = scale(x,center = T,scale = F)
source("~/Dropbox/Junrui Di/tensor analysis/multi-cumulant/script/cumulant/cumu.R")
Y.list = split(x, seq(nrow(x)))
y0 = rep(0,3)
K3_s2= y0 %o% y0 %o% y0
for( i in 1:length(Y.list)){
K3_s2 = K3_s2+ Y.list[[i]] %o% Y.list[[i]] %o% Y.list[[i]]
}
n = nrow(x)
K3_s2 = K3_s2/n
cum = four_cumulants_direct(x)
cum$c3
K3_s2
identical(K3_s2,cum$c3)
K3_s2[1,,]
cum$c3[1,,]
identical(K3_s2[1,,],cum$c3[1,,])
?identical
install.packages(c("robustbase", "withr"))
rm(list = ls())
load("~/Dropbox/Junrui Di/Oral Exam/results/blockdata/average across day/processed.rda")
all = rbind(zData[[1]],zData[[2]],zData[[3]])
all = as.data.frame(t(all))
pca.fit = prcomp(all,center = F,scale. = F)
pve = cumsum(pca.fit$sdev^2 / sum(pca.fit$sdev^2))[1:4]
png(file = "~/Dropbox/Junrui Di/Oral Exam/results/toy examples/pcapve2new.png", width = 12, height = 10,units="in",res=300)
par(oma = c(3,3,3,3))
plot(pve,type = "l",xlab = "Number of PCs", ylab = "Variance Explained",xaxt="n",
cex.lab = 1.5,yaxt = "n")
abline(h=0.437,lty=3)
text(1.2,0.42,"4PCS -> 43.7%",cex = 1.5)
axis(side=1,at=c(1,2,3,4),labels = c(1,2,3,4),cex.axis = 1.5)
axis(side=2,cex.axis = 1.5)
dev.off()
top4pc = pca.fit$rotation[,1:4]
pvebypc = data.frame()
for(i in 1:4){
pveact = sum(top4pc[1:33,i]^2)
pvesleep = sum(top4pc[34:65,i]^2)
pvecirca = sum(top4pc[66:101,i]^2)
pvebypc =rbind(pvebypc,c(pveact,pvesleep,pvecirca))
}
pvebypc = t(pvebypc)
rownames(pvebypc) = c("Activity","Sleep","Circadian")
colnames(pvebypc) = c("pc1","pc2","pc3","pc4")
pvebypc
pve2 = (pca.fit$sdev^2 / sum(pca.fit$sdev^2))[1:4]
pvebypca= cumsum(pve2 * pvebypc[1,])
pvebypcs = cumsum(pve2 * pvebypc[2,])
pvebypcc = cumsum(pve2 * pvebypc[3,])
par(oma = c(3,3,3,3))
plot(pve,type = "b",xlab = "PCA: Number of PCs", ylab = "Cumulative Variance Explained",xaxt="n",
cex.lab = 1.5,yaxt = "n",ylim = c(0,0.45))
lines(pvebypca,col = "red",type = "b")
lines(pvebypcs,col = "blue",type = "b")
lines(pvebypcc,col = "orange",type = "b")
axis(side=1,at=c(1,2,3,4),labels = c(1,2,3,4),cex.axis = 1.5)
axis(side=2,at = seq(0,0.45,0.05),cex.axis = 1.5)
legend("topleft",cex=1.5,bty="n",c("Total","Activity","Sleep","Circadian"),col = c("black","red","blue","orange"),lty = c(1,1,1,1))
rm(list = ls())
load(file = "~/Dropbox/Junrui Di/Oral Exam/results/jiveresult.rda")
jointd = rbind(result.jive$joint[[1]],result.jive$joint[[2]],
result.jive$joint[[3]])
tjointd = t(jointd)
vjp = sum(apply(tjointd,2,var))/101
#
pca = prcomp(tjointd,scale. = F,center = F)
rot = pca$rotation[,1:4]
pvebypc = data.frame()
for(i in 1:4){
pveact = sum(rot[1:33,i]^2)
pvesleep = sum(rot[34:65,i]^2)
pvecirca = sum(rot[66:101,i]^2)
pvebypc =rbind(pvebypc,c(pveact,pvesleep,pvecirca))
}
pvebypc = t(pvebypc)
rownames(pvebypc) = c("Activity","Sleep","Circadian")
colnames(pvebypc) = c("pc1","pc2","pc3","pc4")
# pc1
summary(pca)
pvebypca= cumsum(pve2 * pvebypc[1,])
pve2 = c(0.4512, 0.2896,0.1842, 0.07498)
pvebypca= cumsum(pve2 * pvebypc[1,])
pvebypca
pvebypc[1,]
pve = cumsum(pve2)
rm(list = ls())
load("~/Dropbox/Junrui Di/Oral Exam/results/blockdata/average across day/processed.rda")
all = rbind(zData[[1]],zData[[2]],zData[[3]])
all = as.data.frame(t(all))
pca.fit = prcomp(all,center = F,scale. = F)
pve = cumsum(pca.fit$sdev^2 / sum(pca.fit$sdev^2))[1:4]
#variation expalined by each
top4pc = pca.fit$rotation[,1:4]
pvebypc = data.frame()
for(i in 1:4){
pveact = sum(top4pc[1:33,i]^2)
pvesleep = sum(top4pc[34:65,i]^2)
pvecirca = sum(top4pc[66:101,i]^2)
pvebypc =rbind(pvebypc,c(pveact,pvesleep,pvecirca))
}
pvebypc = t(pvebypc)
rownames(pvebypc) = c("Activity","Sleep","Circadian")
colnames(pvebypc) = c("pc1","pc2","pc3","pc4")
pvebypc
pve2 = (pca.fit$sdev^2 / sum(pca.fit$sdev^2))[1:4]
pvebypca= data.frame(Domain = "Activity", PCs = c(1:4),v = cumsum(pve2 * pvebypc[1,]))
pvebypcs= data.frame(Domain = "Sleep", PCs = c(1:4),v = cumsum(pve2 * pvebypc[2,]))
pvebypcc= data.frame(Domain = "Circadian", PCs = c(1:4),v = cumsum(pve2 * pvebypc[3,]))
pve = data.frame(Domain = "All", PCs = c(1:4), v=pve)
pcadat = rbind(pvebypca,pvebypcs,pvebypcc)
View(pcadat)
sum(pcadat$v[1:4])
pve
View(pcadat)
sum(pcadat$v[5:8])
install.packages(c("cowplot", "devtools", "gamlss", "ggpubr", "lubridate", "Matrix", "multcomp", "openNLPdata", "openssl", "R.utils", "rlang", "rmarkdown", "robustbase", "stringi", "survminer", "tidyselect", "timeDate", "tm", "tsBSS"))
ls()
list.files()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
# git commit -m "2nd commit"
# git push origin master
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Dropbox/web/junruidi.github.io/")
#render your sweet site.
rmarkdown::render_site()
# git add -A
